(ns deck.data)

(def markdown-map 
{"onlyone" "# cljs roguelike\r\n\r\n![](data/img/onlyone.png)\r\n\r\n"
 "why-clojure"
 "# clojure is creative\r\n\r\n★30\r\n\r\n## rich core\r\n\r\n\t(swap! view \r\n\t  (comp flatten \r\n\t    (juxt rest first)))\r\n\r\n\t(->> entites\r\n\t  (remove :dead)\r\n\t  (map (juxt :x :y)))\r\n\r\n★/★24\r\n\r\n## REPL \r\n\r\n\t(map \r\n\t  (constantly :tweak) \r\n\t    [every \r\n\t     part \r\n\t     of \r\n\t     your \r\n\t     game])\r\n\r\n\r\n\r\n★/★46\r\n\r\n## macros\r\n\r\n\t(defmacro ∆ [x] \r\n\t  `(* Time/deltaTime ~x))\r\n\t\r\n\t(when (< (count (every apple)) 5)\r\n\t  (place-apple \r\n\t    (v+ (->v3 (rand-nth (every block)))\r\n\t        (->v3 0 1 0))))\r\n\r\n★/\r\n\r\n## data is a joy\r\n\r\n★30\r\n\r\n* easy to work with\r\n  * `get-in` `update-in`\r\n  * `(merge-with merge a b)`\r\n* easy to write\r\n  * no junk syntax ( ;)\r\n  * paredit | parinfer \r\n\r\n\r\n\r\n★/★35\r\n\r\n\t#{[{} '()]}\r\n\t:k ::qk #\"[^\\n]*\"\r\n\t3/6 0xBADA55 1.2e-5\r\n\r\n    ::TODO \r\n\t'(( ) cache markdown map)\r\n\t  '((/) finish intro)\r\n\t  '((x) game builds)\r\n\t  '(( ) publish slide deck)\r\n\r\n★/★35\r\n\r\n\t{[1  0]  :e \r\n\t [0 -1]  :s \r\n\t [0  1]  :n  \r\n\t [-1 0]  :w}\r\n\r\n\t{#{:n :s :w} \\┤\r\n\t #{:n :s}    \\│\r\n\t #{:n :e :w} \\┴\r\n\t #{:n :e}    \\└}\r\n\r\n★/\r\n\r\n"
 "ec"
 "# `github.com/selfsame/ec`\r\n\r\n## entity/component system for js|cljs\r\n\r\n# ![](./data/img/pong.gif) \r\n\r\n"
 "the-dims"
 "# The Dims\r\n\r\n## https://selfsame.itch.io/the-dims\r\n\r\n# ![](./data/img/clojurecup01.gif)\r\n\r\n\r\n"
 "libgdx-games"
 "# \r\n\r\n>demos\r\n\r\n* sweeper (keys o/p)\r\n* sheep\r\n* europa\r\n\r\n"
 "ec2" "# ![](./data/img/ec2.png) ![](./data/img/ec1.png)\r\n\r\n\r\n"
 "night-farm"
 "### night farm\r\n\r\n# ![](./data/img/night-farm.gif)\r\n\r\n"
 "tween1"
 "★30\r\n\r\n# fast\r\n>* zero garbage\r\n* perf matches C# libs\r\n\r\n★/★70\r\n\r\n# ![](https://files.gitter.im/selfsame/hard/Gm15/bubb23.gif) ![](http://selfsamegames.com/gifs/tweens/tween01.gif)\r\n★/\r\n\r\n## extend as needed\r\n\r\n\t(require '[tween.core :as tween])\r\n\r\n\t(tween.core/deftween text-color [^Color value ^Color target]\r\n\t  (-add [a b] (Color/op_Addition a b))\r\n\t  (-get [this] (.color (.GetComponent this \"TextMesh\")))\r\n\t  (-value [this] (Color/Lerp (.value this) (.target this) (.ratio this))))\r\n\r\n\t(def greenify (text-color (Color. 0 1 0 1) 2.5 :pow2))\r\n\r\n\t(mapv greenify (objects-named \"frog\"))\r\n★/\r\n\r\n"
 "infinity-coaster3"
 "# motion sickness\r\n\r\n# ![](./data/img/proc54.gif) ![](./data/img/proc53.gif)\r\n\r\n"
 "modern-dance"
 "#An Evening of Modern Dance\r\n\r\n## Ludum Dare 32 - 'unconventional weapon'\r\n\r\n# ![](./data/img/modern-dance/lobster1.gif) ![](./data/img/modern-dance/lobster2.gif) \r\n\r\n# ![](./data/img/modern-dance/lobster3.gif)\r\n\r\n"
 "pdfn3"
 "# same problem solved by `core.match`\r\n\r\n## Compiling Pattern Matching to Good Decision Trees\r\n\r\n### (Luc Maranget)\r\n\r\n"
 "whale2"
 "# ![](./data/img/whale/tabfastic.jpg)\r\n\r\n# ![](./data/img/whale/whale-shots.jpg) \r\n\r\n"
 "arcadia2"
 "## this was huge\r\n\r\n# ![](data/img/arcadia/first-repl.jpg)\r\n\r\n"
 "squid2"
 "# squid bikes?\r\n\r\n# ![](./data/img/squid/bike.gif)  ![](./data/img/squid/squid1.gif)    \r\n\r\n"
 "whale"
 "# sperm whale simulator\r\n\r\n# ![](./data/img/whale.gif) ![](./data/img/squid.gif)\r\n\r\n\r\n"
 "infinity-coaster2"
 "# blend shapes \r\n\r\n# ![](./data/img/proc3.gif) ![](./data/img/proc1.gif)\r\n\r\n"
 "infinity-coaster1"
 "# npc tourists\r\n\r\n# ![](./data/img/ahhh2.png)\r\n\r\n"
 "wacky"
 "# wacky waving inflatable tube guys\r\n\r\n# ![](./data/img/wacky/wacky1.gif)\r\n\r\n# ![](./data/img/wacky/wacky2.gif)\r\n\r\n"
 "pdfn2"
 "## `github.com/selfsame/pdfn` (clj/cljs)\r\n\r\n## `[selfsame/pdfn \"1.0.1-SNAPSHOT\"]`\r\n\r\n★50\r\n\r\n## compiles this\r\n\r\n\t(pdfn foo \r\n\t  ([^pos?  a        b ^map?   c] :fish)\r\n\t  ([^pos?  a ^neg?  b ^empty? c] :snail)\r\n\t  ([^neg?  a ^zero? b         c] :mouse)\r\n\t  ([       a ^neg?  b ^map?   c] :bird)\r\n\t  ([^neg?  a        b ^set?   c] :dog)\r\n\t  ([^odd?  a ^pos?  b         c] :lion)\r\n\t  ([^even? a ^neg?  b ^map?   c] :horse))\r\n★/★50\r\n\r\n## into this\r\n\r\n\t(fn ([a b c]\r\n\t  (if (and (even? a) (neg? b) (map? c))\r\n\t    :horse\r\n\t    (if (and (odd? a) (pos? b))\r\n\t      :lion\r\n\t      (if (and (set? c) (neg? a))\r\n\t        :dog\r\n\t        (if (neg? b)\r\n\t          (if (map? c)\r\n\t            :bird\r\n\t            (if (and (neg? a) (zero? b))\r\n\t              :mouse\r\n\t              (if (and (pos? a) (empty? c)) \r\n\t                :snail)))\r\n\t          (if (and (neg? a) (zero? b))\r\n\t            :mouse \r\n\t            (if (and (pos? a) (map? c)) \r\n\t              :fish))))))))\r\n★/\r\n\r\n"
 "modern-dance2"
 "# press coverage\r\n\r\n# ![](./data/img/modern-dance/press.png)\r\n\r\n# 1296 downloads\r\n\r\n## `selfsame.itch.io/modern-dance`\r\n\r\n\r\n\r\n"
 "monster" "# Ludum Dare 33 - 'monster'"
 "pdfn1"
 "## generic Unity component\r\n\r\n# ![](./data/img/pred.gif)\r\n\r\n# ![](./data/img/clojurecup02.gif) ![](./data/img/crab/crab5.gif)\r\n\r\n"
 "squid3"
 "## mapping force to the tentacles\r\n\r\n★25★/★50\r\n\r\n# ![](./data/img/squid/squid3.gif)  \r\n\r\n★/\r\n\r\n# ![](./data/img/squid/squid4.gif)   \r\n\r\n"
 "libgdx"
 "# libGDX\r\n\r\n★40\r\n\r\n>* Full featured Java engine.  \r\n* desktop / android / ios \r\n* `https://github.com/oakes/play-clj`\r\n\r\n★/★60\r\n\r\n># ![](data/img/sausage.jpg)\r\n\r\n★/\r\n\r\n"
 "mud"
 "`github./com/selfsame/mud.tilde.town`\r\n\r\n_________\r\n\r\n# ![](./data/img/mud.png)\r\n\r\n# ![](./data/img/mud2.png)\r\n\r\n"
 "infinity-coaster"
 "# Infinity Coaster\r\n\r\n## `github.com/selfsame/procadia` \r\n\r\n## https://arcadia-clojure.itch.io/infinity-coaster\r\n\r\n### #procjam collaboration with `@nasser` `@timsgardner` `@mysterysal`\r\n\r\n# ![](./data/img/coaster.png) \r\n\r\n"
 "dual-snake"
 "# dual-snake\r\n\r\n## `selfsame.itch.io/dual-snake`\r\n\r\n# ![](./data/img/dual-snake/snake3.gif)  ![](./data/img/dual-snake/uptime2.gif)\r\n\r\n\r\n# ![](./data/img/dual-snake/snake.gif) ![](./data/img/dual-snake/233323445.gif) \r\n\r\n"
 "tween2"
 "★15★/\r\n★70\r\n`assoc` tween opts\r\n\r\n\t(def z (tween/euler (Vector3. 45 0 100) 0.5))\r\n\t(def y (assoc z :duration 1.2))\r\n\t(= z y) ;false\r\n\r\n\r\nmutation allows cyclical refs\r\n\r\n\t(link! a b a) ;a - b - a - CYCLE\r\n\t(link! b z y) ;     \\  z - y\r\n★/\r\n★15★/\r\n\r\n"
 "title"
 "# clojure game-dev!\r\n\r\n## _Joseph Parker_  \r\n\r\n>-----------\r\n># ![me](img/me.png)\r\n\r\n>* `selfsamegames.com`\r\n* `twitter.com/jplur_`\r\n* `github.com/selfsame`\r\n* `selfsame.itch.io`\r\n-----------\r\n\r\n"
 "dual-snake2"
 "# ![](./data/img/dual-snake/form1.gif)  ![](./data/img/dual-snake/snake-forms.gif)  \r\n\r\n# ![](./data/img/dual-snake/form2.gif) ![](./data/img/dual-snake/form3.gif) \r\n\r\n"
 "arcadia"
 "# github.com/arcadia-unity\r\n\r\n## *`@nasser & @timsgardner`*\r\n\r\n## clojure CLR inside Unity\r\n> * complete clj environment & repl\r\n> * clj compilation\r\n> * build and ship to desktop platforms\r\n\r\n"
 "ec1"
 "## mars base - collaboration w/ `@mills_dalton`\r\n\r\n# ![](./data/img/mars.gif) \r\n\r\n"
 "predicate" "# predicate dispatch\r\n\r\n\r\n\r\n"
 "squid"
 "# squid experiments\r\n\r\n# ![](./data/img/squid/squid.gif)  ![](./data/img/squid/squid2.gif) \r\n\r\n"
 "tween"
 "# tween.core\r\n\r\n### `github.com/selfsame/tween`\r\n\r\n# ![](http://selfsamegames.com/gifs/tweens/tut2.gif) ![](http://selfsamegames.com/gifs/tweens/tut3.gif) \r\n\r\n\r\n# ![](./data/img/tween/tween2.gif) \r\n\r\n★35★/\r\n★30\r\n\r\n★/\r\n\r\n\r\n"
 "parade-route"
 "# Parade Route\r\n\r\n## `https://selfsame.itch.io/parade-route`\r\n\r\n## clojure cup 2014 entry\r\n\r\n### first Arcadia game\r\n\r\n# ![](./data/img/parade-route.png)\r\n\r\n"
 "libgdx2"
 "## clj example\r\n\r\n\t(ns yes.core.desktop-launcher\r\n\t  (:import [com.badlogic.gdx.backends.lwjgl LwjglApplication]\r\n\t           [org.lwjgl.input Keyboard])\r\n\t  (:gen-class))\r\n\r\n\t(defn -main []\r\n\t  (LwjglApplication. (yes.core.Game.) \"yes\" 1910 1070 true)\r\n\t  (Keyboard/enableRepeatEvents true))\r\n\r\n★50\r\n\r\n\t(def main-screen\r\n\t  (let [stage (atom nil)]\r\n\t    (proxy [Screen] []\r\n\t      (show [] (new-game))\r\n\t      (render [delta] (repl-render delta))\r\n\t      (dispose [] (.dispose batch))\r\n\t      (hide [])\r\n\t      (pause [])\r\n\t      (resize [w h] (handle-resize w h))\r\n\t      (resume []))))\r\n★/★2\r\n★/★48\r\n\r\n\t(defn -create [^Game this]\r\n\t  (.setScreen this main-screen)\r\n\t  (def batch (SpriteBatch.)))\r\n\r\n\t(defn repl-render [delta]\r\n\t  (.glClearColor (Gdx/gl) r g b a)\r\n\t  (.glClear (Gdx/gl) GL20/GL_COLOR_BUFFER_BIT)\r\n\t  (.begin batch)\r\n\t  'etc)\r\n★/\r\n\r\n"
 "wacky2"
 "# wacky waving inflatable basketball\r\n\r\n# ![](./data/img/wacky/wacky3.gif)\r\n\r\n"
 "whale3"
 "# ![](./data/img/whale/predation.jpg)\r\n\r\n# ![](./data/img/whale/boid.gif)\r\n\r\n\r\n"}
)