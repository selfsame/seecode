;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name pdfn.core, :imports nil, :requires {walk clojure.walk, clojure.walk clojure.walk}, :uses nil, :defs {hosted {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 19, :column 8, :end-line 19, :end-column 14, :private true, :arglists (quote ([kw env]))}, :private true, :name pdfn.core/hosted, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 14, :method-params ([kw env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kw env]))}, sort-grid {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 37, :column 8, :end-line 37, :end-column 17, :private true, :arglists (quote ([grid f]))}, :private true, :name pdfn.core/sort-grid, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([grid f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid f]))}, DISPATCHMAP {:name pdfn.core/DISPATCHMAP, :file "src/out/pdfn/core.cljc", :line 4, :column 1, :end-line 4, :end-column 27, :private true, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 4, :column 16, :end-line 4, :end-column 27, :private true}}, update-idxs {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 39, :column 8, :end-line 39, :end-column 19, :private true, :arglists (quote ([col idxs f]))}, :private true, :name pdfn.core/update-idxs, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 19, :method-params ([col idxs f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists (quote ([col idxs f]))}, is* {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 11, :column 7, :end-line 11, :end-column 10, :arglists (quote ([v]))}, :name pdfn.core/is*, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, opt {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 13, :column 8, :end-line 13, :end-column 11, :private true, :arglists (quote ([sym kw]))}, :private true, :name pdfn.core/opt, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 11, :method-params ([sym kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym kw]))}, and* {:name pdfn.core/and*, :file "src/out/pdfn/core.cljc", :line 8, :column 1, :end-line 8, :end-column 10, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 8, :column 6, :end-line 8, :end-column 10}}, METAMAP {:name pdfn.core/METAMAP, :file "src/out/pdfn/core.cljc", :line 5, :column 1, :end-line 5, :end-column 23, :private true, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 5, :column 16, :end-line 5, :end-column 23, :private true}}, symbol-walk {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 80, :column 8, :end-line 80, :end-column 19, :private true, :arglists (quote ([form xform]))}, :private true, :name pdfn.core/symbol-walk, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 19, :method-params ([form xform]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form xform]))}, defpdfn {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 94, :column 11, :end-line 94, :end-column 18, :macro true, :arglists (quote ([sym & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym more)], :arglists ([&form &env sym & more]), :arglists-meta (nil)}}, :name pdfn.core/defpdfn, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym more)], :arglists ([&form &env sym & more]), :arglists-meta (nil)}, :method-params [(&form &env sym more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 94, :macro true, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env sym & more])}, compile! {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 124, :column 11, :end-line 124, :end-column 19, :macro true, :arglists (quote ([sym]))}, :name pdfn.core/compile!, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 19, :method-params ([&form &env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :macro true, :end-line 124, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sym]))}, grid->ast {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 52, :column 8, :end-line 52, :end-column 17, :private true, :arglists (quote ([-g]))}, :private true, :name pdfn.core/grid->ast, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([-g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([-g]))}, user-meta {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 85, :column 8, :end-line 85, :end-column 17, :private true, :arglists (quote ([v env]))}, :private true, :name pdfn.core/user-meta, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([v env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v env]))}, inspect {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 145, :column 11, :end-line 145, :end-column 18, :macro true, :arglists (quote ([sym & k])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym k)], :arglists ([&form &env sym & k]), :arglists-meta (nil)}}, :name pdfn.core/inspect, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym k)], :arglists ([&form &env sym & k]), :arglists-meta (nil)}, :method-params [(&form &env sym k)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 145, :macro true, :end-line 145, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env sym & k])}, ppexpand {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 143, :column 11, :end-line 143, :end-column 19, :macro true, :arglists (quote ([code]))}, :name pdfn.core/ppexpand, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 19, :method-params ([&form &env code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :macro true, :end-line 143, :max-fixed-arity 3, :fn-var true, :arglists (quote ([code]))}, HOST {:name pdfn.core/HOST, :file "src/out/pdfn/core.cljc", :line 15, :column 1, :end-line 15, :end-column 20, :private true, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 15, :column 16, :end-line 15, :end-column 20, :private true}}, grid-drop-idxs {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 48, :column 8, :end-line 48, :end-column 22, :private true, :arglists (quote ([g idxs]))}, :private true, :name pdfn.core/grid-drop-idxs, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 22, :method-params ([g idxs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g idxs]))}, pdfn-sort {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 92, :column 8, :end-line 92, :end-column 17, :private true, :arglists (quote ([m]))}, :private true, :name pdfn.core/pdfn-sort, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, make-grid {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 23, :column 8, :end-line 23, :end-column 17, :private true, :arglists (quote ([data]))}, :private true, :name pdfn.core/make-grid, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, datatype? {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 78, :column 8, :end-line 78, :end-column 17, :private true, :arglists (quote ([v]))}, :private true, :name pdfn.core/datatype?, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, or* {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 10, :column 6, :end-line 10, :end-column 9}, :name pdfn.core/or*, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 9, :method-params ([args]), :protocol-impl nil, :arglists-meta (), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists nil}, grid-get {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 21, :column 8, :end-line 21, :end-column 16, :private true, :arglists (quote ([col & more])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(col more)], :arglists ([col & more]), :arglists-meta (nil)}}, :private true, :name pdfn.core/grid-get, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(col more)], :arglists ([col & more]), :arglists-meta (nil)}, :method-params [(col more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([col & more])}, before-last {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 90, :column 8, :end-line 90, :end-column 19, :private true, :arglists (quote ([col v]))}, :private true, :name pdfn.core/before-last, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 19, :method-params ([col v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([col v]))}, drop-idxs {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 45, :column 8, :end-line 45, :end-column 17, :private true, :arglists (quote ([col idxs]))}, :private true, :name pdfn.core/drop-idxs, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([col idxs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([col idxs]))}, duplicate-idxs {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 41, :column 8, :end-line 41, :end-column 22, :private true, :arglists (quote ([col]))}, :private true, :name pdfn.core/duplicate-idxs, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 22, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, benchmark {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 141, :column 11, :end-line 141, :end-column 20, :macro true, :arglists (quote ([n & code])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env n code)], :arglists ([&form &env n & code]), :arglists-meta (nil)}}, :name pdfn.core/benchmark, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env n code)], :arglists ([&form &env n & code]), :arglists-meta (nil)}, :method-params [(&form &env n code)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 141, :macro true, :end-line 141, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env n & code])}, not* {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 9, :column 6, :end-line 9, :end-column 10}, :name pdfn.core/not*, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 10, :method-params ([args]), :protocol-impl nil, :arglists-meta (), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists nil}, pdfn {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 99, :column 11, :end-line 99, :end-column 15, :macro true, :arglists (quote ([sym & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym more)], :arglists ([&form &env sym & more]), :arglists-meta (nil)}}, :name pdfn.core/pdfn, :variadic true, :file "src/out/pdfn/core.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env sym more)], :arglists ([&form &env sym & more]), :arglists-meta (nil)}, :method-params [(&form &env sym more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 99, :macro true, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env sym & more])}, score {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 30, :column 8, :end-line 30, :end-column 13, :private true, :arglists (quote ([col]))}, :private true, :name pdfn.core/score, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 13, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, argsyms {:name pdfn.core/argsyms, :file "src/out/pdfn/core.cljc", :line 6, :column 1, :end-line 6, :end-column 23, :private true, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 6, :column 16, :end-line 6, :end-column 23, :private true}}, ast->code {:protocol-inline nil, :meta {:file "/home/selfsame/dev/seecode/src/out/pdfn/core.cljc", :line 73, :column 8, :end-line 73, :end-column 17, :private true, :arglists (quote ([form]))}, :private true, :name pdfn.core/ast->code, :variadic false, :file "src/out/pdfn/core.cljc", :end-column 17, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:qualify-here :args & pdfn.core/ppexpand :leafs :else i__25670__auto__ :ns :name :variadic :file :end-column fn cljs.core/macroexpand-1 :pdfn.core/body cljs.core/time :stub-arity do :source _ if :pdfn.core/nf :re-def-sym :column declare pprint/write :dispatch :cols :line / :end-line set! :tag :idx :& quote pprint/code-dispatch :clj :cljs :inline :pdfn.core/stub cljs.core/dotimes :defer-compile and :a pdfn.core/compile! :pdfn.core/drop def}, :order [:clj :cljs :re-def-sym :qualify-here def / set! :name :ns :cols :leafs :args :pdfn.core/drop :pdfn.core/nf :pdfn.core/body do and if :else :tag :file :line :column :end-line :end-column :source :idx & :inline :defer-compile pdfn.core/compile! _ quote :variadic declare :a :& fn :stub-arity :pdfn.core/stub cljs.core/time cljs.core/dotimes i__25670__auto__ pprint/write cljs.core/macroexpand-1 :dispatch pprint/code-dispatch pdfn.core/ppexpand]}, :doc nil}