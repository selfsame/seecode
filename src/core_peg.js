window.core_peg = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          "take-while",
          { type: "literal", value: "take-while", description: "\"take-while\"" },
          "take",
          { type: "literal", value: "take", description: "\"take\"" },
          "remove",
          { type: "literal", value: "remove", description: "\"remove\"" },
          "reducer",
          { type: "literal", value: "reducer", description: "\"reducer\"" },
          "reduce",
          { type: "literal", value: "reduce", description: "\"reduce\"" },
          "monoid",
          { type: "literal", value: "monoid", description: "\"monoid\"" },
          "mapcat",
          { type: "literal", value: "mapcat", description: "\"mapcat\"" },
          "map",
          { type: "literal", value: "map", description: "\"map\"" },
          "folder",
          { type: "literal", value: "folder", description: "\"folder\"" },
          "foldcat",
          { type: "literal", value: "foldcat", description: "\"foldcat\"" },
          "fold",
          { type: "literal", value: "fold", description: "\"fold\"" },
          "flatten",
          { type: "literal", value: "flatten", description: "\"flatten\"" },
          "filter",
          { type: "literal", value: "filter", description: "\"filter\"" },
          "drop",
          { type: "literal", value: "drop", description: "\"drop\"" },
          "cat",
          { type: "literal", value: "cat", description: "\"cat\"" },
          "append!",
          { type: "literal", value: "append!", description: "\"append!\"" },
          "->Cat",
          { type: "literal", value: "->Cat", description: "\"->Cat\"" },
          "zipmap",
          { type: "literal", value: "zipmap", description: "\"zipmap\"" },
          "zero?",
          { type: "literal", value: "zero?", description: "\"zero?\"" },
          "xml-seq",
          { type: "literal", value: "xml-seq", description: "\"xml-seq\"" },
          "with-redefs-fn",
          { type: "literal", value: "with-redefs-fn", description: "\"with-redefs-fn\"" },
          "with-redefs",
          { type: "literal", value: "with-redefs", description: "\"with-redefs\"" },
          "with-precision",
          { type: "literal", value: "with-precision", description: "\"with-precision\"" },
          "with-out-str",
          { type: "literal", value: "with-out-str", description: "\"with-out-str\"" },
          "with-open",
          { type: "literal", value: "with-open", description: "\"with-open\"" },
          "with-meta",
          { type: "literal", value: "with-meta", description: "\"with-meta\"" },
          "with-local-vars",
          { type: "literal", value: "with-local-vars", description: "\"with-local-vars\"" },
          "with-in-str",
          { type: "literal", value: "with-in-str", description: "\"with-in-str\"" },
          "with-bindings*",
          { type: "literal", value: "with-bindings*", description: "\"with-bindings*\"" },
          "with-bindings",
          { type: "literal", value: "with-bindings", description: "\"with-bindings\"" },
          "while",
          { type: "literal", value: "while", description: "\"while\"" },
          "when-some",
          { type: "literal", value: "when-some", description: "\"when-some\"" },
          "when-not",
          { type: "literal", value: "when-not", description: "\"when-not\"" },
          "when-let",
          { type: "literal", value: "when-let", description: "\"when-let\"" },
          "when-first",
          { type: "literal", value: "when-first", description: "\"when-first\"" },
          "when",
          { type: "literal", value: "when", description: "\"when\"" },
          "vswap!",
          { type: "literal", value: "vswap!", description: "\"vswap!\"" },
          "vreset!",
          { type: "literal", value: "vreset!", description: "\"vreset!\"" },
          "volatile?",
          { type: "literal", value: "volatile?", description: "\"volatile?\"" },
          "volatile!",
          { type: "literal", value: "volatile!", description: "\"volatile!\"" },
          "vector?",
          { type: "literal", value: "vector?", description: "\"vector?\"" },
          "vector-of",
          { type: "literal", value: "vector-of", description: "\"vector-of\"" },
          "vector",
          { type: "literal", value: "vector", description: "\"vector\"" },
          "vec",
          { type: "literal", value: "vec", description: "\"vec\"" },
          "vary-meta",
          { type: "literal", value: "vary-meta", description: "\"vary-meta\"" },
          "var?",
          { type: "literal", value: "var?", description: "\"var?\"" },
          "var-set",
          { type: "literal", value: "var-set", description: "\"var-set\"" },
          "var-get",
          { type: "literal", value: "var-get", description: "\"var-get\"" },
          "var",
          { type: "literal", value: "var", description: "\"var\"" },
          "vals",
          { type: "literal", value: "vals", description: "\"vals\"" },
          "val",
          { type: "literal", value: "val", description: "\"val\"" },
          "use",
          { type: "literal", value: "use", description: "\"use\"" },
          "update-proxy",
          { type: "literal", value: "update-proxy", description: "\"update-proxy\"" },
          "update-in",
          { type: "literal", value: "update-in", description: "\"update-in\"" },
          "update",
          { type: "literal", value: "update", description: "\"update\"" },
          "unsigned-bit-shift-right",
          { type: "literal", value: "unsigned-bit-shift-right", description: "\"unsigned-bit-shift-right\"" },
          "unreduced",
          { type: "literal", value: "unreduced", description: "\"unreduced\"" },
          "underive",
          { type: "literal", value: "underive", description: "\"underive\"" },
          "unchecked-subtract-int",
          { type: "literal", value: "unchecked-subtract-int", description: "\"unchecked-subtract-int\"" },
          "unchecked-subtract",
          { type: "literal", value: "unchecked-subtract", description: "\"unchecked-subtract\"" },
          "unchecked-short",
          { type: "literal", value: "unchecked-short", description: "\"unchecked-short\"" },
          "unchecked-remainder-int",
          { type: "literal", value: "unchecked-remainder-int", description: "\"unchecked-remainder-int\"" },
          "unchecked-negate-int",
          { type: "literal", value: "unchecked-negate-int", description: "\"unchecked-negate-int\"" },
          "unchecked-negate",
          { type: "literal", value: "unchecked-negate", description: "\"unchecked-negate\"" },
          "unchecked-multiply-int",
          { type: "literal", value: "unchecked-multiply-int", description: "\"unchecked-multiply-int\"" },
          "unchecked-multiply",
          { type: "literal", value: "unchecked-multiply", description: "\"unchecked-multiply\"" },
          "unchecked-long",
          { type: "literal", value: "unchecked-long", description: "\"unchecked-long\"" },
          "unchecked-int",
          { type: "literal", value: "unchecked-int", description: "\"unchecked-int\"" },
          "unchecked-inc-int",
          { type: "literal", value: "unchecked-inc-int", description: "\"unchecked-inc-int\"" },
          "unchecked-inc",
          { type: "literal", value: "unchecked-inc", description: "\"unchecked-inc\"" },
          "unchecked-float",
          { type: "literal", value: "unchecked-float", description: "\"unchecked-float\"" },
          "unchecked-double",
          { type: "literal", value: "unchecked-double", description: "\"unchecked-double\"" },
          "unchecked-divide-int",
          { type: "literal", value: "unchecked-divide-int", description: "\"unchecked-divide-int\"" },
          "unchecked-dec-int",
          { type: "literal", value: "unchecked-dec-int", description: "\"unchecked-dec-int\"" },
          "unchecked-dec",
          { type: "literal", value: "unchecked-dec", description: "\"unchecked-dec\"" },
          "unchecked-char",
          { type: "literal", value: "unchecked-char", description: "\"unchecked-char\"" },
          "unchecked-byte",
          { type: "literal", value: "unchecked-byte", description: "\"unchecked-byte\"" },
          "unchecked-add-int",
          { type: "literal", value: "unchecked-add-int", description: "\"unchecked-add-int\"" },
          "unchecked-add",
          { type: "literal", value: "unchecked-add", description: "\"unchecked-add\"" },
          "type",
          { type: "literal", value: "type", description: "\"type\"" },
          "try",
          { type: "literal", value: "try", description: "\"try\"" },
          "true?",
          { type: "literal", value: "true?", description: "\"true?\"" },
          "tree-seq",
          { type: "literal", value: "tree-seq", description: "\"tree-seq\"" },
          "transient",
          { type: "literal", value: "transient", description: "\"transient\"" },
          "transduce",
          { type: "literal", value: "transduce", description: "\"transduce\"" },
          "trampoline",
          { type: "literal", value: "trampoline", description: "\"trampoline\"" },
          "to-array-2d",
          { type: "literal", value: "to-array-2d", description: "\"to-array-2d\"" },
          "to-array",
          { type: "literal", value: "to-array", description: "\"to-array\"" },
          "time",
          { type: "literal", value: "time", description: "\"time\"" },
          "throw",
          { type: "literal", value: "throw", description: "\"throw\"" },
          "thread-bound?",
          { type: "literal", value: "thread-bound?", description: "\"thread-bound?\"" },
          "the-ns",
          { type: "literal", value: "the-ns", description: "\"the-ns\"" },
          "test",
          { type: "literal", value: "test", description: "\"test\"" },
          "take-nth",
          { type: "literal", value: "take-nth", description: "\"take-nth\"" },
          "take-last",
          { type: "literal", value: "take-last", description: "\"take-last\"" },
          "tagged-literal?",
          { type: "literal", value: "tagged-literal?", description: "\"tagged-literal?\"" },
          "tagged-literal",
          { type: "literal", value: "tagged-literal", description: "\"tagged-literal\"" },
          "sync",
          { type: "literal", value: "sync", description: "\"sync\"" },
          "symbol?",
          { type: "literal", value: "symbol?", description: "\"symbol?\"" },
          "symbol",
          { type: "literal", value: "symbol", description: "\"symbol\"" },
          "swap!",
          { type: "literal", value: "swap!", description: "\"swap!\"" },
          "supers",
          { type: "literal", value: "supers", description: "\"supers\"" },
          "subvec",
          { type: "literal", value: "subvec", description: "\"subvec\"" },
          "subseq",
          { type: "literal", value: "subseq", description: "\"subseq\"" },
          "subs",
          { type: "literal", value: "subs", description: "\"subs\"" },
          "struct-map",
          { type: "literal", value: "struct-map", description: "\"struct-map\"" },
          "struct",
          { type: "literal", value: "struct", description: "\"struct\"" },
          "string?",
          { type: "literal", value: "string?", description: "\"string?\"" },
          "str",
          { type: "literal", value: "str", description: "\"str\"" },
          "split-with",
          { type: "literal", value: "split-with", description: "\"split-with\"" },
          "split-at",
          { type: "literal", value: "split-at", description: "\"split-at\"" },
          "spit",
          { type: "literal", value: "spit", description: "\"spit\"" },
          "special-symbol?",
          { type: "literal", value: "special-symbol?", description: "\"special-symbol?\"" },
          "sorted?",
          { type: "literal", value: "sorted?", description: "\"sorted?\"" },
          "sorted-set-by",
          { type: "literal", value: "sorted-set-by", description: "\"sorted-set-by\"" },
          "sorted-set",
          { type: "literal", value: "sorted-set", description: "\"sorted-set\"" },
          "sorted-map-by",
          { type: "literal", value: "sorted-map-by", description: "\"sorted-map-by\"" },
          "sorted-map",
          { type: "literal", value: "sorted-map", description: "\"sorted-map\"" },
          "sort-by",
          { type: "literal", value: "sort-by", description: "\"sort-by\"" },
          "sort",
          { type: "literal", value: "sort", description: "\"sort\"" },
          "some?",
          { type: "literal", value: "some?", description: "\"some?\"" },
          "some-fn",
          { type: "literal", value: "some-fn", description: "\"some-fn\"" },
          "some->>",
          { type: "literal", value: "some->>", description: "\"some->>\"" },
          "some->",
          { type: "literal", value: "some->", description: "\"some->\"" },
          "some",
          { type: "literal", value: "some", description: "\"some\"" },
          "slurp",
          { type: "literal", value: "slurp", description: "\"slurp\"" },
          "shutdown-agents",
          { type: "literal", value: "shutdown-agents", description: "\"shutdown-agents\"" },
          "shuffle",
          { type: "literal", value: "shuffle", description: "\"shuffle\"" },
          "shorts",
          { type: "literal", value: "shorts", description: "\"shorts\"" },
          "short-array",
          { type: "literal", value: "short-array", description: "\"short-array\"" },
          "short",
          { type: "literal", value: "short", description: "\"short\"" },
          "set?",
          { type: "literal", value: "set?", description: "\"set?\"" },
          "set-validator!",
          { type: "literal", value: "set-validator!", description: "\"set-validator!\"" },
          "set-error-mode!",
          { type: "literal", value: "set-error-mode!", description: "\"set-error-mode!\"" },
          "set-error-handler!",
          { type: "literal", value: "set-error-handler!", description: "\"set-error-handler!\"" },
          "set-agent-send-off-executor!",
          { type: "literal", value: "set-agent-send-off-executor!", description: "\"set-agent-send-off-executor!\"" },
          "set-agent-send-executor!",
          { type: "literal", value: "set-agent-send-executor!", description: "\"set-agent-send-executor!\"" },
          "set!",
          { type: "literal", value: "set!", description: "\"set!\"" },
          "set",
          { type: "literal", value: "set", description: "\"set\"" },
          "sequential?",
          { type: "literal", value: "sequential?", description: "\"sequential?\"" },
          "sequence",
          { type: "literal", value: "sequence", description: "\"sequence\"" },
          "seque",
          { type: "literal", value: "seque", description: "\"seque\"" },
          "seq?",
          { type: "literal", value: "seq?", description: "\"seq?\"" },
          "seq",
          { type: "literal", value: "seq", description: "\"seq\"" },
          "send-via",
          { type: "literal", value: "send-via", description: "\"send-via\"" },
          "send-off",
          { type: "literal", value: "send-off", description: "\"send-off\"" },
          "send",
          { type: "literal", value: "send", description: "\"send\"" },
          "select-keys",
          { type: "literal", value: "select-keys", description: "\"select-keys\"" },
          "second",
          { type: "literal", value: "second", description: "\"second\"" },
          "satisfies?",
          { type: "literal", value: "satisfies?", description: "\"satisfies?\"" },
          "run!",
          { type: "literal", value: "run!", description: "\"run!\"" },
          "rsubseq",
          { type: "literal", value: "rsubseq", description: "\"rsubseq\"" },
          "rseq",
          { type: "literal", value: "rseq", description: "\"rseq\"" },
          "reversible?",
          { type: "literal", value: "reversible?", description: "\"reversible?\"" },
          "reverse",
          { type: "literal", value: "reverse", description: "\"reverse\"" },
          "resultset-seq",
          { type: "literal", value: "resultset-seq", description: "\"resultset-seq\"" },
          "restart-agent",
          { type: "literal", value: "restart-agent", description: "\"restart-agent\"" },
          "rest",
          { type: "literal", value: "rest", description: "\"rest\"" },
          "resolve",
          { type: "literal", value: "resolve", description: "\"resolve\"" },
          "reset-meta!",
          { type: "literal", value: "reset-meta!", description: "\"reset-meta!\"" },
          "reset!",
          { type: "literal", value: "reset!", description: "\"reset!\"" },
          "require",
          { type: "literal", value: "require", description: "\"require\"" },
          "replicate",
          { type: "literal", value: "replicate", description: "\"replicate\"" },
          "replace",
          { type: "literal", value: "replace", description: "\"replace\"" },
          "repeatedly",
          { type: "literal", value: "repeatedly", description: "\"repeatedly\"" },
          "repeat",
          { type: "literal", value: "repeat", description: "\"repeat\"" },
          "remove-watch",
          { type: "literal", value: "remove-watch", description: "\"remove-watch\"" },
          "remove-ns",
          { type: "literal", value: "remove-ns", description: "\"remove-ns\"" },
          "remove-method",
          { type: "literal", value: "remove-method", description: "\"remove-method\"" },
          "remove-all-methods",
          { type: "literal", value: "remove-all-methods", description: "\"remove-all-methods\"" },
          "rem",
          { type: "literal", value: "rem", description: "\"rem\"" },
          "release-pending-sends",
          { type: "literal", value: "release-pending-sends", description: "\"release-pending-sends\"" },
          "reify",
          { type: "literal", value: "reify", description: "\"reify\"" },
          "refer-clojure",
          { type: "literal", value: "refer-clojure", description: "\"refer-clojure\"" },
          "refer",
          { type: "literal", value: "refer", description: "\"refer\"" },
          "ref-set",
          { type: "literal", value: "ref-set", description: "\"ref-set\"" },
          "ref-min-history",
          { type: "literal", value: "ref-min-history", description: "\"ref-min-history\"" },
          "ref-max-history",
          { type: "literal", value: "ref-max-history", description: "\"ref-max-history\"" },
          "ref-history-count",
          { type: "literal", value: "ref-history-count", description: "\"ref-history-count\"" },
          "ref",
          { type: "literal", value: "ref", description: "\"ref\"" },
          "reductions",
          { type: "literal", value: "reductions", description: "\"reductions\"" },
          "reduced?",
          { type: "literal", value: "reduced?", description: "\"reduced?\"" },
          "reduced",
          { type: "literal", value: "reduced", description: "\"reduced\"" },
          "reduce-kv",
          { type: "literal", value: "reduce-kv", description: "\"reduce-kv\"" },
          "recur",
          { type: "literal", value: "recur", description: "\"recur\"" },
          "record?",
          { type: "literal", value: "record?", description: "\"record?\"" },
          "realized?",
          { type: "literal", value: "realized?", description: "\"realized?\"" },
          "reader-conditional?",
          { type: "literal", value: "reader-conditional?", description: "\"reader-conditional?\"" },
          "reader-conditional",
          { type: "literal", value: "reader-conditional", description: "\"reader-conditional\"" },
          "read-string",
          { type: "literal", value: "read-string", description: "\"read-string\"" },
          "read-line",
          { type: "literal", value: "read-line", description: "\"read-line\"" },
          "read",
          { type: "literal", value: "read", description: "\"read\"" },
          "re-seq",
          { type: "literal", value: "re-seq", description: "\"re-seq\"" },
          "re-pattern",
          { type: "literal", value: "re-pattern", description: "\"re-pattern\"" },
          "re-matches",
          { type: "literal", value: "re-matches", description: "\"re-matches\"" },
          "re-matcher",
          { type: "literal", value: "re-matcher", description: "\"re-matcher\"" },
          "re-groups",
          { type: "literal", value: "re-groups", description: "\"re-groups\"" },
          "re-find",
          { type: "literal", value: "re-find", description: "\"re-find\"" },
          "rationalize",
          { type: "literal", value: "rationalize", description: "\"rationalize\"" },
          "rational?",
          { type: "literal", value: "rational?", description: "\"rational?\"" },
          "ratio?",
          { type: "literal", value: "ratio?", description: "\"ratio?\"" },
          "range",
          { type: "literal", value: "range", description: "\"range\"" },
          "random-sample",
          { type: "literal", value: "random-sample", description: "\"random-sample\"" },
          "rand-nth",
          { type: "literal", value: "rand-nth", description: "\"rand-nth\"" },
          "rand-int",
          { type: "literal", value: "rand-int", description: "\"rand-int\"" },
          "rand",
          { type: "literal", value: "rand", description: "\"rand\"" },
          "quote",
          { type: "literal", value: "quote", description: "\"quote\"" },
          "quot",
          { type: "literal", value: "quot", description: "\"quot\"" },
          "pvalues",
          { type: "literal", value: "pvalues", description: "\"pvalues\"" },
          "push-thread-bindings",
          { type: "literal", value: "push-thread-bindings", description: "\"push-thread-bindings\"" },
          "proxy-super",
          { type: "literal", value: "proxy-super", description: "\"proxy-super\"" },
          "proxy-mappings",
          { type: "literal", value: "proxy-mappings", description: "\"proxy-mappings\"" },
          "proxy",
          { type: "literal", value: "proxy", description: "\"proxy\"" },
          "promise",
          { type: "literal", value: "promise", description: "\"promise\"" },
          "prn-str",
          { type: "literal", value: "prn-str", description: "\"prn-str\"" },
          "prn",
          { type: "literal", value: "prn", description: "\"prn\"" },
          "println-str",
          { type: "literal", value: "println-str", description: "\"println-str\"" },
          "println",
          { type: "literal", value: "println", description: "\"println\"" },
          "printf",
          { type: "literal", value: "printf", description: "\"printf\"" },
          "print-str",
          { type: "literal", value: "print-str", description: "\"print-str\"" },
          "print",
          { type: "literal", value: "print", description: "\"print\"" },
          "prefers",
          { type: "literal", value: "prefers", description: "\"prefers\"" },
          "prefer-method",
          { type: "literal", value: "prefer-method", description: "\"prefer-method\"" },
          "pr-str",
          { type: "literal", value: "pr-str", description: "\"pr-str\"" },
          "pr",
          { type: "literal", value: "pr", description: "\"pr\"" },
          "pos?",
          { type: "literal", value: "pos?", description: "\"pos?\"" },
          "pop-thread-bindings",
          { type: "literal", value: "pop-thread-bindings", description: "\"pop-thread-bindings\"" },
          "pop!",
          { type: "literal", value: "pop!", description: "\"pop!\"" },
          "pop",
          { type: "literal", value: "pop", description: "\"pop\"" },
          "pmap",
          { type: "literal", value: "pmap", description: "\"pmap\"" },
          "persistent!",
          { type: "literal", value: "persistent!", description: "\"persistent!\"" },
          "peek",
          { type: "literal", value: "peek", description: "\"peek\"" },
          "pcalls",
          { type: "literal", value: "pcalls", description: "\"pcalls\"" },
          "partition-by",
          { type: "literal", value: "partition-by", description: "\"partition-by\"" },
          "partition-all",
          { type: "literal", value: "partition-all", description: "\"partition-all\"" },
          "partition",
          { type: "literal", value: "partition", description: "\"partition\"" },
          "partial",
          { type: "literal", value: "partial", description: "\"partial\"" },
          "parents",
          { type: "literal", value: "parents", description: "\"parents\"" },
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          "odd?",
          { type: "literal", value: "odd?", description: "\"odd?\"" },
          "object-array",
          { type: "literal", value: "object-array", description: "\"object-array\"" },
          "numerator",
          { type: "literal", value: "numerator", description: "\"numerator\"" },
          "number?",
          { type: "literal", value: "number?", description: "\"number?\"" },
          "num",
          { type: "literal", value: "num", description: "\"num\"" },
          "nthrest",
          { type: "literal", value: "nthrest", description: "\"nthrest\"" },
          "nthnext",
          { type: "literal", value: "nthnext", description: "\"nthnext\"" },
          "nth",
          { type: "literal", value: "nth", description: "\"nth\"" },
          "ns-unmap",
          { type: "literal", value: "ns-unmap", description: "\"ns-unmap\"" },
          "ns-unalias",
          { type: "literal", value: "ns-unalias", description: "\"ns-unalias\"" },
          "ns-resolve",
          { type: "literal", value: "ns-resolve", description: "\"ns-resolve\"" },
          "ns-refers",
          { type: "literal", value: "ns-refers", description: "\"ns-refers\"" },
          "ns-publics",
          { type: "literal", value: "ns-publics", description: "\"ns-publics\"" },
          "ns-name",
          { type: "literal", value: "ns-name", description: "\"ns-name\"" },
          "ns-map",
          { type: "literal", value: "ns-map", description: "\"ns-map\"" },
          "ns-interns",
          { type: "literal", value: "ns-interns", description: "\"ns-interns\"" },
          "ns-imports",
          { type: "literal", value: "ns-imports", description: "\"ns-imports\"" },
          "ns-aliases",
          { type: "literal", value: "ns-aliases", description: "\"ns-aliases\"" },
          "ns",
          { type: "literal", value: "ns", description: "\"ns\"" },
          "not=",
          { type: "literal", value: "not=", description: "\"not=\"" },
          "not-every?",
          { type: "literal", value: "not-every?", description: "\"not-every?\"" },
          "not-empty",
          { type: "literal", value: "not-empty", description: "\"not-empty\"" },
          "not-any?",
          { type: "literal", value: "not-any?", description: "\"not-any?\"" },
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          "nnext",
          { type: "literal", value: "nnext", description: "\"nnext\"" },
          "nil?",
          { type: "literal", value: "nil?", description: "\"nil?\"" },
          "nfirst",
          { type: "literal", value: "nfirst", description: "\"nfirst\"" },
          "next",
          { type: "literal", value: "next", description: "\"next\"" },
          "newline",
          { type: "literal", value: "newline", description: "\"newline\"" },
          "new",
          { type: "literal", value: "new", description: "\"new\"" },
          "neg?",
          { type: "literal", value: "neg?", description: "\"neg?\"" },
          "namespace-munge",
          { type: "literal", value: "namespace-munge", description: "\"namespace-munge\"" },
          "namespace",
          { type: "literal", value: "namespace", description: "\"namespace\"" },
          "name",
          { type: "literal", value: "name", description: "\"name\"" },
          "monitor-exit",
          { type: "literal", value: "monitor-exit", description: "\"monitor-exit\"" },
          "monitor-enter",
          { type: "literal", value: "monitor-enter", description: "\"monitor-enter\"" },
          "mod",
          { type: "literal", value: "mod", description: "\"mod\"" },
          "mix-collection-hash",
          { type: "literal", value: "mix-collection-hash", description: "\"mix-collection-hash\"" },
          "min-key",
          { type: "literal", value: "min-key", description: "\"min-key\"" },
          "min",
          { type: "literal", value: "min", description: "\"min\"" },
          "methods",
          { type: "literal", value: "methods", description: "\"methods\"" },
          "meta",
          { type: "literal", value: "meta", description: "\"meta\"" },
          "merge-with",
          { type: "literal", value: "merge-with", description: "\"merge-with\"" },
          "merge",
          { type: "literal", value: "merge", description: "\"merge\"" },
          "memoize",
          { type: "literal", value: "memoize", description: "\"memoize\"" },
          "memfn",
          { type: "literal", value: "memfn", description: "\"memfn\"" },
          "max-key",
          { type: "literal", value: "max-key", description: "\"max-key\"" },
          "max",
          { type: "literal", value: "max", description: "\"max\"" },
          "mapv",
          { type: "literal", value: "mapv", description: "\"mapv\"" },
          "map?",
          { type: "literal", value: "map?", description: "\"map?\"" },
          "map-indexed",
          { type: "literal", value: "map-indexed", description: "\"map-indexed\"" },
          "make-hierarchy",
          { type: "literal", value: "make-hierarchy", description: "\"make-hierarchy\"" },
          "make-array",
          { type: "literal", value: "make-array", description: "\"make-array\"" },
          "macroexpand-1",
          { type: "literal", value: "macroexpand-1", description: "\"macroexpand-1\"" },
          "macroexpand",
          { type: "literal", value: "macroexpand", description: "\"macroexpand\"" },
          "loop",
          { type: "literal", value: "loop", description: "\"loop\"" },
          "longs",
          { type: "literal", value: "longs", description: "\"longs\"" },
          "long-array",
          { type: "literal", value: "long-array", description: "\"long-array\"" },
          "long",
          { type: "literal", value: "long", description: "\"long\"" },
          "locking",
          { type: "literal", value: "locking", description: "\"locking\"" },
          "loaded-libs",
          { type: "literal", value: "loaded-libs", description: "\"loaded-libs\"" },
          "load-string",
          { type: "literal", value: "load-string", description: "\"load-string\"" },
          "load-reader",
          { type: "literal", value: "load-reader", description: "\"load-reader\"" },
          "load-file",
          { type: "literal", value: "load-file", description: "\"load-file\"" },
          "load",
          { type: "literal", value: "load", description: "\"load\"" },
          "list?",
          { type: "literal", value: "list?", description: "\"list?\"" },
          "list*",
          { type: "literal", value: "list*", description: "\"list*\"" },
          "list",
          { type: "literal", value: "list", description: "\"list\"" },
          "line-seq",
          { type: "literal", value: "line-seq", description: "\"line-seq\"" },
          "letfn",
          { type: "literal", value: "letfn", description: "\"letfn\"" },
          "let",
          { type: "literal", value: "let", description: "\"let\"" },
          "lazy-seq",
          { type: "literal", value: "lazy-seq", description: "\"lazy-seq\"" },
          "lazy-cat",
          { type: "literal", value: "lazy-cat", description: "\"lazy-cat\"" },
          "last",
          { type: "literal", value: "last", description: "\"last\"" },
          "keyword?",
          { type: "literal", value: "keyword?", description: "\"keyword?\"" },
          "keyword",
          { type: "literal", value: "keyword", description: "\"keyword\"" },
          "keys",
          { type: "literal", value: "keys", description: "\"keys\"" },
          "key",
          { type: "literal", value: "key", description: "\"key\"" },
          "keep-indexed",
          { type: "literal", value: "keep-indexed", description: "\"keep-indexed\"" },
          "keep",
          { type: "literal", value: "keep", description: "\"keep\"" },
          "juxt",
          { type: "literal", value: "juxt", description: "\"juxt\"" },
          "iterator-seq",
          { type: "literal", value: "iterator-seq", description: "\"iterator-seq\"" },
          "iterate",
          { type: "literal", value: "iterate", description: "\"iterate\"" },
          "isa?",
          { type: "literal", value: "isa?", description: "\"isa?\"" },
          "io!",
          { type: "literal", value: "io!", description: "\"io!\"" },
          "ints",
          { type: "literal", value: "ints", description: "\"ints\"" },
          "into-array",
          { type: "literal", value: "into-array", description: "\"into-array\"" },
          "into",
          { type: "literal", value: "into", description: "\"into\"" },
          "interpose",
          { type: "literal", value: "interpose", description: "\"interpose\"" },
          "intern",
          { type: "literal", value: "intern", description: "\"intern\"" },
          "interleave",
          { type: "literal", value: "interleave", description: "\"interleave\"" },
          "integer?",
          { type: "literal", value: "integer?", description: "\"integer?\"" },
          "int-array",
          { type: "literal", value: "int-array", description: "\"int-array\"" },
          "int",
          { type: "literal", value: "int", description: "\"int\"" },
          "instance?",
          { type: "literal", value: "instance?", description: "\"instance?\"" },
          "init-proxy",
          { type: "literal", value: "init-proxy", description: "\"init-proxy\"" },
          "inc",
          { type: "literal", value: "inc", description: "\"inc\"" },
          "in-ns",
          { type: "literal", value: "in-ns", description: "\"in-ns\"" },
          "import",
          { type: "literal", value: "import", description: "\"import\"" },
          "ifn?",
          { type: "literal", value: "ifn?", description: "\"ifn?\"" },
          "if-some",
          { type: "literal", value: "if-some", description: "\"if-some\"" },
          "if-not",
          { type: "literal", value: "if-not", description: "\"if-not\"" },
          "if-let",
          { type: "literal", value: "if-let", description: "\"if-let\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          "identity",
          { type: "literal", value: "identity", description: "\"identity\"" },
          "identical?",
          { type: "literal", value: "identical?", description: "\"identical?\"" },
          "hash-unordered-coll",
          { type: "literal", value: "hash-unordered-coll", description: "\"hash-unordered-coll\"" },
          "hash-set",
          { type: "literal", value: "hash-set", description: "\"hash-set\"" },
          "hash-ordered-coll",
          { type: "literal", value: "hash-ordered-coll", description: "\"hash-ordered-coll\"" },
          "hash-map",
          { type: "literal", value: "hash-map", description: "\"hash-map\"" },
          "hash",
          { type: "literal", value: "hash", description: "\"hash\"" },
          "group-by",
          { type: "literal", value: "group-by", description: "\"group-by\"" },
          "get-validator",
          { type: "literal", value: "get-validator", description: "\"get-validator\"" },
          "get-thread-bindings",
          { type: "literal", value: "get-thread-bindings", description: "\"get-thread-bindings\"" },
          "get-proxy-class",
          { type: "literal", value: "get-proxy-class", description: "\"get-proxy-class\"" },
          "get-method",
          { type: "literal", value: "get-method", description: "\"get-method\"" },
          "get-in",
          { type: "literal", value: "get-in", description: "\"get-in\"" },
          "get",
          { type: "literal", value: "get", description: "\"get\"" },
          "gensym",
          { type: "literal", value: "gensym", description: "\"gensym\"" },
          "gen-interface",
          { type: "literal", value: "gen-interface", description: "\"gen-interface\"" },
          "gen-class",
          { type: "literal", value: "gen-class", description: "\"gen-class\"" },
          "future?",
          { type: "literal", value: "future?", description: "\"future?\"" },
          "future-done?",
          { type: "literal", value: "future-done?", description: "\"future-done?\"" },
          "future-cancelled?",
          { type: "literal", value: "future-cancelled?", description: "\"future-cancelled?\"" },
          "future-cancel",
          { type: "literal", value: "future-cancel", description: "\"future-cancel\"" },
          "future-call",
          { type: "literal", value: "future-call", description: "\"future-call\"" },
          "future",
          { type: "literal", value: "future", description: "\"future\"" },
          "frequencies",
          { type: "literal", value: "frequencies", description: "\"frequencies\"" },
          "format",
          { type: "literal", value: "format", description: "\"format\"" },
          "force",
          { type: "literal", value: "force", description: "\"force\"" },
          "for",
          { type: "literal", value: "for", description: "\"for\"" },
          "fnil",
          { type: "literal", value: "fnil", description: "\"fnil\"" },
          "fnext",
          { type: "literal", value: "fnext", description: "\"fnext\"" },
          "fn?",
          { type: "literal", value: "fn?", description: "\"fn?\"" },
          "fn",
          { type: "literal", value: "fn", description: "\"fn\"" },
          "flush",
          { type: "literal", value: "flush", description: "\"flush\"" },
          "floats",
          { type: "literal", value: "floats", description: "\"floats\"" },
          "float?",
          { type: "literal", value: "float?", description: "\"float?\"" },
          "float-array",
          { type: "literal", value: "float-array", description: "\"float-array\"" },
          "float",
          { type: "literal", value: "float", description: "\"float\"" },
          "first",
          { type: "literal", value: "first", description: "\"first\"" },
          "find-var",
          { type: "literal", value: "find-var", description: "\"find-var\"" },
          "find-ns",
          { type: "literal", value: "find-ns", description: "\"find-ns\"" },
          "find-keyword",
          { type: "literal", value: "find-keyword", description: "\"find-keyword\"" },
          "find",
          { type: "literal", value: "find", description: "\"find\"" },
          "finally",
          { type: "literal", value: "finally", description: "\"finally\"" },
          "filterv",
          { type: "literal", value: "filterv", description: "\"filterv\"" },
          "file-seq",
          { type: "literal", value: "file-seq", description: "\"file-seq\"" },
          "ffirst",
          { type: "literal", value: "ffirst", description: "\"ffirst\"" },
          "false?",
          { type: "literal", value: "false?", description: "\"false?\"" },
          "extends?",
          { type: "literal", value: "extends?", description: "\"extends?\"" },
          "extenders",
          { type: "literal", value: "extenders", description: "\"extenders\"" },
          "extend-type",
          { type: "literal", value: "extend-type", description: "\"extend-type\"" },
          "extend-protocol",
          { type: "literal", value: "extend-protocol", description: "\"extend-protocol\"" },
          "extend",
          { type: "literal", value: "extend", description: "\"extend\"" },
          "ex-info",
          { type: "literal", value: "ex-info", description: "\"ex-info\"" },
          "ex-data",
          { type: "literal", value: "ex-data", description: "\"ex-data\"" },
          "every?",
          { type: "literal", value: "every?", description: "\"every?\"" },
          "every-pred",
          { type: "literal", value: "every-pred", description: "\"every-pred\"" },
          "even?",
          { type: "literal", value: "even?", description: "\"even?\"" },
          "eval",
          { type: "literal", value: "eval", description: "\"eval\"" },
          "error-mode",
          { type: "literal", value: "error-mode", description: "\"error-mode\"" },
          "error-handler",
          { type: "literal", value: "error-handler", description: "\"error-handler\"" },
          "enumeration-seq",
          { type: "literal", value: "enumeration-seq", description: "\"enumeration-seq\"" },
          "ensure-reduced",
          { type: "literal", value: "ensure-reduced", description: "\"ensure-reduced\"" },
          "ensure",
          { type: "literal", value: "ensure", description: "\"ensure\"" },
          "empty?",
          { type: "literal", value: "empty?", description: "\"empty?\"" },
          "empty",
          { type: "literal", value: "empty", description: "\"empty\"" },
          "eduction",
          { type: "literal", value: "eduction", description: "\"eduction\"" },
          "drop-while",
          { type: "literal", value: "drop-while", description: "\"drop-while\"" },
          "drop-last",
          { type: "literal", value: "drop-last", description: "\"drop-last\"" },
          "doubles",
          { type: "literal", value: "doubles", description: "\"doubles\"" },
          "double-array",
          { type: "literal", value: "double-array", description: "\"double-array\"" },
          "double",
          { type: "literal", value: "double", description: "\"double\"" },
          "doto",
          { type: "literal", value: "doto", description: "\"doto\"" },
          "dotimes",
          { type: "literal", value: "dotimes", description: "\"dotimes\"" },
          "dosync",
          { type: "literal", value: "dosync", description: "\"dosync\"" },
          "doseq",
          { type: "literal", value: "doseq", description: "\"doseq\"" },
          "dorun",
          { type: "literal", value: "dorun", description: "\"dorun\"" },
          "doall",
          { type: "literal", value: "doall", description: "\"doall\"" },
          "do",
          { type: "literal", value: "do", description: "\"do\"" },
          "distinct?",
          { type: "literal", value: "distinct?", description: "\"distinct?\"" },
          "distinct",
          { type: "literal", value: "distinct", description: "\"distinct\"" },
          "dissoc!",
          { type: "literal", value: "dissoc!", description: "\"dissoc!\"" },
          "dissoc",
          { type: "literal", value: "dissoc", description: "\"dissoc\"" },
          "disj!",
          { type: "literal", value: "disj!", description: "\"disj!\"" },
          "disj",
          { type: "literal", value: "disj", description: "\"disj\"" },
          "descendants",
          { type: "literal", value: "descendants", description: "\"descendants\"" },
          "derive",
          { type: "literal", value: "derive", description: "\"derive\"" },
          "deref",
          { type: "literal", value: "deref", description: "\"deref\"" },
          "denominator",
          { type: "literal", value: "denominator", description: "\"denominator\"" },
          "deliver",
          { type: "literal", value: "deliver", description: "\"deliver\"" },
          "delay?",
          { type: "literal", value: "delay?", description: "\"delay?\"" },
          "delay",
          { type: "literal", value: "delay", description: "\"delay\"" },
          "deftype",
          { type: "literal", value: "deftype", description: "\"deftype\"" },
          "defstruct",
          { type: "literal", value: "defstruct", description: "\"defstruct\"" },
          "defrecord",
          { type: "literal", value: "defrecord", description: "\"defrecord\"" },
          "defprotocol",
          { type: "literal", value: "defprotocol", description: "\"defprotocol\"" },
          "defonce",
          { type: "literal", value: "defonce", description: "\"defonce\"" },
          "defn-",
          { type: "literal", value: "defn-", description: "\"defn-\"" },
          "defn",
          { type: "literal", value: "defn", description: "\"defn\"" },
          "defmulti",
          { type: "literal", value: "defmulti", description: "\"defmulti\"" },
          "defmethod",
          { type: "literal", value: "defmethod", description: "\"defmethod\"" },
          "defmacro",
          { type: "literal", value: "defmacro", description: "\"defmacro\"" },
          "definterface",
          { type: "literal", value: "definterface", description: "\"definterface\"" },
          "definline",
          { type: "literal", value: "definline", description: "\"definline\"" },
          "default-data-readers",
          { type: "literal", value: "default-data-readers", description: "\"default-data-readers\"" },
          "def",
          { type: "literal", value: "def", description: "\"def\"" },
          "dedupe",
          { type: "literal", value: "dedupe", description: "\"dedupe\"" },
          "declare",
          { type: "literal", value: "declare", description: "\"declare\"" },
          "decimal?",
          { type: "literal", value: "decimal?", description: "\"decimal?\"" },
          "dec",
          { type: "literal", value: "dec", description: "\"dec\"" },
          "cycle",
          { type: "literal", value: "cycle", description: "\"cycle\"" },
          "create-struct",
          { type: "literal", value: "create-struct", description: "\"create-struct\"" },
          "create-ns",
          { type: "literal", value: "create-ns", description: "\"create-ns\"" },
          "counted?",
          { type: "literal", value: "counted?", description: "\"counted?\"" },
          "count",
          { type: "literal", value: "count", description: "\"count\"" },
          "contains?",
          { type: "literal", value: "contains?", description: "\"contains?\"" },
          "construct-proxy",
          { type: "literal", value: "construct-proxy", description: "\"construct-proxy\"" },
          "constantly",
          { type: "literal", value: "constantly", description: "\"constantly\"" },
          "cons",
          { type: "literal", value: "cons", description: "\"cons\"" },
          "conj!",
          { type: "literal", value: "conj!", description: "\"conj!\"" },
          "conj",
          { type: "literal", value: "conj", description: "\"conj\"" },
          "condp",
          { type: "literal", value: "condp", description: "\"condp\"" },
          "cond->>",
          { type: "literal", value: "cond->>", description: "\"cond->>\"" },
          "cond->",
          { type: "literal", value: "cond->", description: "\"cond->\"" },
          "cond",
          { type: "literal", value: "cond", description: "\"cond\"" },
          "concat",
          { type: "literal", value: "concat", description: "\"concat\"" },
          "completing",
          { type: "literal", value: "completing", description: "\"completing\"" },
          "complement",
          { type: "literal", value: "complement", description: "\"complement\"" },
          "compile",
          { type: "literal", value: "compile", description: "\"compile\"" },
          "compare-and-set!",
          { type: "literal", value: "compare-and-set!", description: "\"compare-and-set!\"" },
          "compare",
          { type: "literal", value: "compare", description: "\"compare\"" },
          "comparator",
          { type: "literal", value: "comparator", description: "\"comparator\"" },
          "comp",
          { type: "literal", value: "comp", description: "\"comp\"" },
          "commute",
          { type: "literal", value: "commute", description: "\"commute\"" },
          "comment",
          { type: "literal", value: "comment", description: "\"comment\"" },
          "coll?",
          { type: "literal", value: "coll?", description: "\"coll?\"" },
          "clojure-version",
          { type: "literal", value: "clojure-version", description: "\"clojure-version\"" },
          "clear-agent-errors",
          { type: "literal", value: "clear-agent-errors", description: "\"clear-agent-errors\"" },
          "class?",
          { type: "literal", value: "class?", description: "\"class?\"" },
          "class",
          { type: "literal", value: "class", description: "\"class\"" },
          "chars",
          { type: "literal", value: "chars", description: "\"chars\"" },
          "char?",
          { type: "literal", value: "char?", description: "\"char?\"" },
          "char-name-string",
          { type: "literal", value: "char-name-string", description: "\"char-name-string\"" },
          "char-escape-string",
          { type: "literal", value: "char-escape-string", description: "\"char-escape-string\"" },
          "char-array",
          { type: "literal", value: "char-array", description: "\"char-array\"" },
          "char",
          { type: "literal", value: "char", description: "\"char\"" },
          "catch",
          { type: "literal", value: "catch", description: "\"catch\"" },
          "cast",
          { type: "literal", value: "cast", description: "\"cast\"" },
          "case",
          { type: "literal", value: "case", description: "\"case\"" },
          "bytes",
          { type: "literal", value: "bytes", description: "\"bytes\"" },
          "byte-array",
          { type: "literal", value: "byte-array", description: "\"byte-array\"" },
          "byte",
          { type: "literal", value: "byte", description: "\"byte\"" },
          "butlast",
          { type: "literal", value: "butlast", description: "\"butlast\"" },
          "bound?",
          { type: "literal", value: "bound?", description: "\"bound?\"" },
          "bound-fn*",
          { type: "literal", value: "bound-fn*", description: "\"bound-fn*\"" },
          "bound-fn",
          { type: "literal", value: "bound-fn", description: "\"bound-fn\"" },
          "booleans",
          { type: "literal", value: "booleans", description: "\"booleans\"" },
          "boolean-array",
          { type: "literal", value: "boolean-array", description: "\"boolean-array\"" },
          "boolean",
          { type: "literal", value: "boolean", description: "\"boolean\"" },
          "bit-xor",
          { type: "literal", value: "bit-xor", description: "\"bit-xor\"" },
          "bit-test",
          { type: "literal", value: "bit-test", description: "\"bit-test\"" },
          "bit-shift-right",
          { type: "literal", value: "bit-shift-right", description: "\"bit-shift-right\"" },
          "bit-shift-left",
          { type: "literal", value: "bit-shift-left", description: "\"bit-shift-left\"" },
          "bit-set",
          { type: "literal", value: "bit-set", description: "\"bit-set\"" },
          "bit-or",
          { type: "literal", value: "bit-or", description: "\"bit-or\"" },
          "bit-not",
          { type: "literal", value: "bit-not", description: "\"bit-not\"" },
          "bit-flip",
          { type: "literal", value: "bit-flip", description: "\"bit-flip\"" },
          "bit-clear",
          { type: "literal", value: "bit-clear", description: "\"bit-clear\"" },
          "bit-and-not",
          { type: "literal", value: "bit-and-not", description: "\"bit-and-not\"" },
          "bit-and",
          { type: "literal", value: "bit-and", description: "\"bit-and\"" },
          "binding",
          { type: "literal", value: "binding", description: "\"binding\"" },
          "biginteger",
          { type: "literal", value: "biginteger", description: "\"biginteger\"" },
          "bigint",
          { type: "literal", value: "bigint", description: "\"bigint\"" },
          "bigdec",
          { type: "literal", value: "bigdec", description: "\"bigdec\"" },
          "bean",
          { type: "literal", value: "bean", description: "\"bean\"" },
          "bases",
          { type: "literal", value: "bases", description: "\"bases\"" },
          "await-for",
          { type: "literal", value: "await-for", description: "\"await-for\"" },
          "await",
          { type: "literal", value: "await", description: "\"await\"" },
          "atom",
          { type: "literal", value: "atom", description: "\"atom\"" },
          "associative?",
          { type: "literal", value: "associative?", description: "\"associative?\"" },
          "assoc-in",
          { type: "literal", value: "assoc-in", description: "\"assoc-in\"" },
          "assoc!",
          { type: "literal", value: "assoc!", description: "\"assoc!\"" },
          "assoc",
          { type: "literal", value: "assoc", description: "\"assoc\"" },
          "assert",
          { type: "literal", value: "assert", description: "\"assert\"" },
          "aset-short",
          { type: "literal", value: "aset-short", description: "\"aset-short\"" },
          "aset-long",
          { type: "literal", value: "aset-long", description: "\"aset-long\"" },
          "aset-int",
          { type: "literal", value: "aset-int", description: "\"aset-int\"" },
          "aset-float",
          { type: "literal", value: "aset-float", description: "\"aset-float\"" },
          "aset-double",
          { type: "literal", value: "aset-double", description: "\"aset-double\"" },
          "aset-char",
          { type: "literal", value: "aset-char", description: "\"aset-char\"" },
          "aset-byte",
          { type: "literal", value: "aset-byte", description: "\"aset-byte\"" },
          "aset-boolean",
          { type: "literal", value: "aset-boolean", description: "\"aset-boolean\"" },
          "aset",
          { type: "literal", value: "aset", description: "\"aset\"" },
          "as->",
          { type: "literal", value: "as->", description: "\"as->\"" },
          "array-map",
          { type: "literal", value: "array-map", description: "\"array-map\"" },
          "areduce",
          { type: "literal", value: "areduce", description: "\"areduce\"" },
          "apply",
          { type: "literal", value: "apply", description: "\"apply\"" },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          "ancestors",
          { type: "literal", value: "ancestors", description: "\"ancestors\"" },
          "amap",
          { type: "literal", value: "amap", description: "\"amap\"" },
          "alter-var-root",
          { type: "literal", value: "alter-var-root", description: "\"alter-var-root\"" },
          "alter-meta!",
          { type: "literal", value: "alter-meta!", description: "\"alter-meta!\"" },
          "alter",
          { type: "literal", value: "alter", description: "\"alter\"" },
          "all-ns",
          { type: "literal", value: "all-ns", description: "\"all-ns\"" },
          "alias",
          { type: "literal", value: "alias", description: "\"alias\"" },
          "alength",
          { type: "literal", value: "alength", description: "\"alength\"" },
          "aget",
          { type: "literal", value: "aget", description: "\"aget\"" },
          "agent-errors",
          { type: "literal", value: "agent-errors", description: "\"agent-errors\"" },
          "agent-error",
          { type: "literal", value: "agent-error", description: "\"agent-error\"" },
          "agent",
          { type: "literal", value: "agent", description: "\"agent\"" },
          "add-watch",
          { type: "literal", value: "add-watch", description: "\"add-watch\"" },
          "add-classpath",
          { type: "literal", value: "add-classpath", description: "\"add-classpath\"" },
          "aclone",
          { type: "literal", value: "aclone", description: "\"aclone\"" },
          "accessor",
          { type: "literal", value: "accessor", description: "\"accessor\"" },
          "Throwable->map",
          { type: "literal", value: "Throwable->map", description: "\"Throwable->map\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "==",
          { type: "literal", value: "==", description: "\"==\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          "->VecSeq",
          { type: "literal", value: "->VecSeq", description: "\"->VecSeq\"" },
          "->VecNode",
          { type: "literal", value: "->VecNode", description: "\"->VecNode\"" },
          "->Vec",
          { type: "literal", value: "->Vec", description: "\"->Vec\"" },
          "->Eduction",
          { type: "literal", value: "->Eduction", description: "\"->Eduction\"" },
          "->ArrayChunk",
          { type: "literal", value: "->ArrayChunk", description: "\"->ArrayChunk\"" },
          "->>",
          { type: "literal", value: "->>", description: "\"->>\"" },
          "->",
          { type: "literal", value: "->", description: "\"->\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "*warn-on-reflection*",
          { type: "literal", value: "*warn-on-reflection*", description: "\"*warn-on-reflection*\"" },
          "*unchecked-math*",
          { type: "literal", value: "*unchecked-math*", description: "\"*unchecked-math*\"" },
          "*read-eval*",
          { type: "literal", value: "*read-eval*", description: "\"*read-eval*\"" },
          "*print-readably*",
          { type: "literal", value: "*print-readably*", description: "\"*print-readably*\"" },
          "*print-meta*",
          { type: "literal", value: "*print-meta*", description: "\"*print-meta*\"" },
          "*print-level*",
          { type: "literal", value: "*print-level*", description: "\"*print-level*\"" },
          "*print-length*",
          { type: "literal", value: "*print-length*", description: "\"*print-length*\"" },
          "*print-dup*",
          { type: "literal", value: "*print-dup*", description: "\"*print-dup*\"" },
          "*out*",
          { type: "literal", value: "*out*", description: "\"*out*\"" },
          "*ns*",
          { type: "literal", value: "*ns*", description: "\"*ns*\"" },
          "*in*",
          { type: "literal", value: "*in*", description: "\"*in*\"" },
          "*flush-on-newline*",
          { type: "literal", value: "*flush-on-newline*", description: "\"*flush-on-newline*\"" },
          "*file*",
          { type: "literal", value: "*file*", description: "\"*file*\"" },
          "*err*",
          { type: "literal", value: "*err*", description: "\"*err*\"" },
          "*e",
          { type: "literal", value: "*e", description: "\"*e\"" },
          "*default-data-reader-fn*",
          { type: "literal", value: "*default-data-reader-fn*", description: "\"*default-data-reader-fn*\"" },
          "*data-readers*",
          { type: "literal", value: "*data-readers*", description: "\"*data-readers*\"" },
          "*compiler-options*",
          { type: "literal", value: "*compiler-options*", description: "\"*compiler-options*\"" },
          "*compile-path*",
          { type: "literal", value: "*compile-path*", description: "\"*compile-path*\"" },
          "*compile-files*",
          { type: "literal", value: "*compile-files*", description: "\"*compile-files*\"" },
          "*command-line-args*",
          { type: "literal", value: "*command-line-args*", description: "\"*command-line-args*\"" },
          "*clojure-version*",
          { type: "literal", value: "*clojure-version*", description: "\"*clojure-version*\"" },
          "*agent*",
          { type: "literal", value: "*agent*", description: "\"*agent*\"" },
          function(val) {return true;},
          { type: "any", description: "any character" },
          /^[^.]/,
          { type: "class", value: "[^.]", description: "[^.]" },
          function() {return false;}
        ],

        peg$bytecode = [
          peg$decode(";!.# &;\""),
          peg$decode("%2 \"\"6 7!.\u1C61 &2\"\"\"6\"7#.\u1C55 &2$\"\"6$7%.\u1C49 &2&\"\"6&7'.\u1C3D &2(\"\"6(7).\u1C31 &2*\"\"6*7+.\u1C25 &2,\"\"6,7-.\u1C19 &2.\"\"6.7/.\u1C0D &20\"\"6071.\u1C01 &22\"\"6273.\u1BF5 &24\"\"6475.\u1BE9 &26\"\"6677.\u1BDD &28\"\"6879.\u1BD1 &2:\"\"6:7;.\u1BC5 &2<\"\"6<7=.\u1BB9 &2>\"\"6>7?.\u1BAD &2@\"\"6@7A.\u1BA1 &2B\"\"6B7C.\u1B95 &2D\"\"6D7E.\u1B89 &2F\"\"6F7G.\u1B7D &2H\"\"6H7I.\u1B71 &2J\"\"6J7K.\u1B65 &2L\"\"6L7M.\u1B59 &2N\"\"6N7O.\u1B4D &2P\"\"6P7Q.\u1B41 &2R\"\"6R7S.\u1B35 &2T\"\"6T7U.\u1B29 &2V\"\"6V7W.\u1B1D &2X\"\"6X7Y.\u1B11 &2Z\"\"6Z7[.\u1B05 &2\\\"\"6\\7].\u1AF9 &2^\"\"6^7_.\u1AED &2`\"\"6`7a.\u1AE1 &2b\"\"6b7c.\u1AD5 &2d\"\"6d7e.\u1AC9 &2f\"\"6f7g.\u1ABD &2h\"\"6h7i.\u1AB1 &2j\"\"6j7k.\u1AA5 &2l\"\"6l7m.\u1A99 &2n\"\"6n7o.\u1A8D &2p\"\"6p7q.\u1A81 &2r\"\"6r7s.\u1A75 &2t\"\"6t7u.\u1A69 &2v\"\"6v7w.\u1A5D &2x\"\"6x7y.\u1A51 &2z\"\"6z7{.\u1A45 &2|\"\"6|7}.\u1A39 &2~\"\"6~7.\u1A2D &2\x80\"\"6\x807\x81.\u1A21 &2\x82\"\"6\x827\x83.\u1A15 &2\x84\"\"6\x847\x85.\u1A09 &2\x86\"\"6\x867\x87.\u19FD &2\x88\"\"6\x887\x89.\u19F1 &2\x8A\"\"6\x8A7\x8B.\u19E5 &2\x8C\"\"6\x8C7\x8D.\u19D9 &2\x8E\"\"6\x8E7\x8F.\u19CD &2\x90\"\"6\x907\x91.\u19C1 &2\x92\"\"6\x927\x93.\u19B5 &2\x94\"\"6\x947\x95.\u19A9 &2\x96\"\"6\x967\x97.\u199D &2\x98\"\"6\x987\x99.\u1991 &2\x9A\"\"6\x9A7\x9B.\u1985 &2\x9C\"\"6\x9C7\x9D.\u1979 &2\x9E\"\"6\x9E7\x9F.\u196D &2\xA0\"\"6\xA07\xA1.\u1961 &2\xA2\"\"6\xA27\xA3.\u1955 &2\xA4\"\"6\xA47\xA5.\u1949 &2\xA6\"\"6\xA67\xA7.\u193D &2\xA8\"\"6\xA87\xA9.\u1931 &2\xAA\"\"6\xAA7\xAB.\u1925 &2\xAC\"\"6\xAC7\xAD.\u1919 &2\xAE\"\"6\xAE7\xAF.\u190D &2\xB0\"\"6\xB07\xB1.\u1901 &2\xB2\"\"6\xB27\xB3.\u18F5 &2\xB4\"\"6\xB47\xB5.\u18E9 &2\xB6\"\"6\xB67\xB7.\u18DD &2\xB8\"\"6\xB87\xB9.\u18D1 &2\xBA\"\"6\xBA7\xBB.\u18C5 &2\xBC\"\"6\xBC7\xBD.\u18B9 &2\xBE\"\"6\xBE7\xBF.\u18AD &2\xC0\"\"6\xC07\xC1.\u18A1 &2\xC2\"\"6\xC27\xC3.\u1895 &2\xC4\"\"6\xC47\xC5.\u1889 &2\xC6\"\"6\xC67\xC7.\u187D &2\xC8\"\"6\xC87\xC9.\u1871 &2\xCA\"\"6\xCA7\xCB.\u1865 &2\xCC\"\"6\xCC7\xCD.\u1859 &2\xCE\"\"6\xCE7\xCF.\u184D &2\xD0\"\"6\xD07\xD1.\u1841 &2\xD2\"\"6\xD27\xD3.\u1835 &2\xD4\"\"6\xD47\xD5.\u1829 &2\xD6\"\"6\xD67\xD7.\u181D &2\xD8\"\"6\xD87\xD9.\u1811 &2 \"\"6 7!.\u1805 &2\xDA\"\"6\xDA7\xDB.\u17F9 &2\xDC\"\"6\xDC7\xDD.\u17ED &2\"\"\"6\"7#.\u17E1 &2\xDE\"\"6\xDE7\xDF.\u17D5 &2\xE0\"\"6\xE07\xE1.\u17C9 &2\xE2\"\"6\xE27\xE3.\u17BD &2\xE4\"\"6\xE47\xE5.\u17B1 &2\xE6\"\"6\xE67\xE7.\u17A5 &2\xE8\"\"6\xE87\xE9.\u1799 &2\xEA\"\"6\xEA7\xEB.\u178D &2\xEC\"\"6\xEC7\xED.\u1781 &2\xEE\"\"6\xEE7\xEF.\u1775 &2\xF0\"\"6\xF07\xF1.\u1769 &2\xF2\"\"6\xF27\xF3.\u175D &2\xF4\"\"6\xF47\xF5.\u1751 &2\xF6\"\"6\xF67\xF7.\u1745 &2\xF8\"\"6\xF87\xF9.\u1739 &2\xFA\"\"6\xFA7\xFB.\u172D &2\xFC\"\"6\xFC7\xFD.\u1721 &2\xFE\"\"6\xFE7\xFF.\u1715 &2\u0100\"\"6\u01007\u0101.\u1709 &2\u0102\"\"6\u01027\u0103.\u16FD &2\u0104\"\"6\u01047\u0105.\u16F1 &2\u0106\"\"6\u01067\u0107.\u16E5 &2\u0108\"\"6\u01087\u0109.\u16D9 &2\u010A\"\"6\u010A7\u010B.\u16CD &2\u010C\"\"6\u010C7\u010D.\u16C1 &2\u010E\"\"6\u010E7\u010F.\u16B5 &2\u0110\"\"6\u01107\u0111.\u16A9 &2\u0112\"\"6\u01127\u0113.\u169D &2\u0114\"\"6\u01147\u0115.\u1691 &2\u0116\"\"6\u01167\u0117.\u1685 &2\u0118\"\"6\u01187\u0119.\u1679 &2\u011A\"\"6\u011A7\u011B.\u166D &2\u011C\"\"6\u011C7\u011D.\u1661 &2\u011E\"\"6\u011E7\u011F.\u1655 &2\u0120\"\"6\u01207\u0121.\u1649 &2\u0122\"\"6\u01227\u0123.\u163D &2\u0124\"\"6\u01247\u0125.\u1631 &2\u0126\"\"6\u01267\u0127.\u1625 &2\u0128\"\"6\u01287\u0129.\u1619 &2\u012A\"\"6\u012A7\u012B.\u160D &2\u012C\"\"6\u012C7\u012D.\u1601 &2\u012E\"\"6\u012E7\u012F.\u15F5 &2\u0130\"\"6\u01307\u0131.\u15E9 &2\u0132\"\"6\u01327\u0133.\u15DD &2\u0134\"\"6\u01347\u0135.\u15D1 &2\u0136\"\"6\u01367\u0137.\u15C5 &2\u0138\"\"6\u01387\u0139.\u15B9 &2\u013A\"\"6\u013A7\u013B.\u15AD &2\u013C\"\"6\u013C7\u013D.\u15A1 &2\u013E\"\"6\u013E7\u013F.\u1595 &2\u0140\"\"6\u01407\u0141.\u1589 &2\u0142\"\"6\u01427\u0143.\u157D &2\u0144\"\"6\u01447\u0145.\u1571 &2\u0146\"\"6\u01467\u0147.\u1565 &2\u0148\"\"6\u01487\u0149.\u1559 &2\u014A\"\"6\u014A7\u014B.\u154D &2\u014C\"\"6\u014C7\u014D.\u1541 &2\u014E\"\"6\u014E7\u014F.\u1535 &2\u0150\"\"6\u01507\u0151.\u1529 &2\u0152\"\"6\u01527\u0153.\u151D &2\u0154\"\"6\u01547\u0155.\u1511 &2\u0156\"\"6\u01567\u0157.\u1505 &2\u0158\"\"6\u01587\u0159.\u14F9 &2\u015A\"\"6\u015A7\u015B.\u14ED &2\u015C\"\"6\u015C7\u015D.\u14E1 &2\u015E\"\"6\u015E7\u015F.\u14D5 &2\u0160\"\"6\u01607\u0161.\u14C9 &2\u0162\"\"6\u01627\u0163.\u14BD &2\u0164\"\"6\u01647\u0165.\u14B1 &2\u0166\"\"6\u01667\u0167.\u14A5 &2\u0168\"\"6\u01687\u0169.\u1499 &2\u016A\"\"6\u016A7\u016B.\u148D &2\u016C\"\"6\u016C7\u016D.\u1481 &2\u016E\"\"6\u016E7\u016F.\u1475 &2\u0170\"\"6\u01707\u0171.\u1469 &2\u0172\"\"6\u01727\u0173.\u145D &2$\"\"6$7%.\u1451 &2\u0174\"\"6\u01747\u0175.\u1445 &2\u0176\"\"6\u01767\u0177.\u1439 &2\u0178\"\"6\u01787\u0179.\u142D &2\u017A\"\"6\u017A7\u017B.\u1421 &2\u017C\"\"6\u017C7\u017D.\u1415 &2\u017E\"\"6\u017E7\u017F.\u1409 &2\u0180\"\"6\u01807\u0181.\u13FD &2\u0182\"\"6\u01827\u0183.\u13F1 &2\u0184\"\"6\u01847\u0185.\u13E5 &2\u0186\"\"6\u01867\u0187.\u13D9 &2\u0188\"\"6\u01887\u0189.\u13CD &2\u018A\"\"6\u018A7\u018B.\u13C1 &2\u018C\"\"6\u018C7\u018D.\u13B5 &2\u018E\"\"6\u018E7\u018F.\u13A9 &2(\"\"6(7).\u139D &2\u0190\"\"6\u01907\u0191.\u1391 &2\u0192\"\"6\u01927\u0193.\u1385 &2\u0194\"\"6\u01947\u0195.\u1379 &2\u0196\"\"6\u01967\u0197.\u136D &2\u0198\"\"6\u01987\u0199.\u1361 &2\u019A\"\"6\u019A7\u019B.\u1355 &2\u019C\"\"6\u019C7\u019D.\u1349 &2\u019E\"\"6\u019E7\u019F.\u133D &2\u01A0\"\"6\u01A07\u01A1.\u1331 &2\u01A2\"\"6\u01A27\u01A3.\u1325 &2\u01A4\"\"6\u01A47\u01A5.\u1319 &2\u01A6\"\"6\u01A67\u01A7.\u130D &2\u01A8\"\"6\u01A87\u01A9.\u1301 &2\u01AA\"\"6\u01AA7\u01AB.\u12F5 &2\u01AC\"\"6\u01AC7\u01AD.\u12E9 &2\u01AE\"\"6\u01AE7\u01AF.\u12DD &2\u01B0\"\"6\u01B07\u01B1.\u12D1 &2\u01B2\"\"6\u01B27\u01B3.\u12C5 &2\u01B4\"\"6\u01B47\u01B5.\u12B9 &2\u01B6\"\"6\u01B67\u01B7.\u12AD &2\u01B8\"\"6\u01B87\u01B9.\u12A1 &2\u01BA\"\"6\u01BA7\u01BB.\u1295 &2\u01BC\"\"6\u01BC7\u01BD.\u1289 &2\u01BE\"\"6\u01BE7\u01BF.\u127D &2\u01C0\"\"6\u01C07\u01C1.\u1271 &2\u01C2\"\"6\u01C27\u01C3.\u1265 &2\u01C4\"\"6\u01C47\u01C5.\u1259 &2\u01C6\"\"6\u01C67\u01C7.\u124D &2\u01C8\"\"6\u01C87\u01C9.\u1241 &2\u01CA\"\"6\u01CA7\u01CB.\u1235 &2\u01CC\"\"6\u01CC7\u01CD.\u1229 &2\u01CE\"\"6\u01CE7\u01CF.\u121D &2\u01D0\"\"6\u01D07\u01D1.\u1211 &2\u01D2\"\"6\u01D27\u01D3.\u1205 &2\u01D4\"\"6\u01D47\u01D5.\u11F9 &2\u01D6\"\"6\u01D67\u01D7.\u11ED &2\u01D8\"\"6\u01D87\u01D9.\u11E1 &2\u01DA\"\"6\u01DA7\u01DB.\u11D5 &2\u01DC\"\"6\u01DC7\u01DD.\u11C9 &2\u01DE\"\"6\u01DE7\u01DF.\u11BD &2\u01E0\"\"6\u01E07\u01E1.\u11B1 &2\u01E2\"\"6\u01E27\u01E3.\u11A5 &2\u01E4\"\"6\u01E47\u01E5.\u1199 &2\u01E6\"\"6\u01E67\u01E7.\u118D &2\u01E8\"\"6\u01E87\u01E9.\u1181 &2\u01EA\"\"6\u01EA7\u01EB.\u1175 &2\u01EC\"\"6\u01EC7\u01ED.\u1169 &2\u01EE\"\"6\u01EE7\u01EF.\u115D &2\u01F0\"\"6\u01F07\u01F1.\u1151 &2\u01F2\"\"6\u01F27\u01F3.\u1145 &2\u01F4\"\"6\u01F47\u01F5.\u1139 &2\u01F6\"\"6\u01F67\u01F7.\u112D &2\u01F8\"\"6\u01F87\u01F9.\u1121 &2\u01FA\"\"6\u01FA7\u01FB.\u1115 &2\u01FC\"\"6\u01FC7\u01FD.\u1109 &2\u01FE\"\"6\u01FE7\u01FF.\u10FD &2\u0200\"\"6\u02007\u0201.\u10F1 &2\u0202\"\"6\u02027\u0203.\u10E5 &2\u0204\"\"6\u02047\u0205.\u10D9 &2\u0206\"\"6\u02067\u0207.\u10CD &2\u0208\"\"6\u02087\u0209.\u10C1 &2\u020A\"\"6\u020A7\u020B.\u10B5 &2\u020C\"\"6\u020C7\u020D.\u10A9 &2\u020E\"\"6\u020E7\u020F.\u109D &2\u0210\"\"6\u02107\u0211.\u1091 &2\u0212\"\"6\u02127\u0213.\u1085 &2\u0214\"\"6\u02147\u0215.\u1079 &2\u0216\"\"6\u02167\u0217.\u106D &2\u0218\"\"6\u02187\u0219.\u1061 &2\u021A\"\"6\u021A7\u021B.\u1055 &2\u021C\"\"6\u021C7\u021D.\u1049 &2\u021E\"\"6\u021E7\u021F.\u103D &2\u0220\"\"6\u02207\u0221.\u1031 &2\u0222\"\"6\u02227\u0223.\u1025 &2\u0224\"\"6\u02247\u0225.\u1019 &2\u0226\"\"6\u02267\u0227.\u100D &2\u0228\"\"6\u02287\u0229.\u1001 &2\u022A\"\"6\u022A7\u022B.\u0FF5 &2\u022C\"\"6\u022C7\u022D.\u0FE9 &2\u022E\"\"6\u022E7\u022F.\u0FDD &2\u0230\"\"6\u02307\u0231.\u0FD1 &2\u0232\"\"6\u02327\u0233.\u0FC5 &2\u0234\"\"6\u02347\u0235.\u0FB9 &2\u0236\"\"6\u02367\u0237.\u0FAD &2\u0238\"\"6\u02387\u0239.\u0FA1 &2\u023A\"\"6\u023A7\u023B.\u0F95 &2\u023C\"\"6\u023C7\u023D.\u0F89 &2\u023E\"\"6\u023E7\u023F.\u0F7D &2\u0240\"\"6\u02407\u0241.\u0F71 &2\u0242\"\"6\u02427\u0243.\u0F65 &2\u0244\"\"6\u02447\u0245.\u0F59 &2\u0246\"\"6\u02467\u0247.\u0F4D &2\u0248\"\"6\u02487\u0249.\u0F41 &2\u024A\"\"6\u024A7\u024B.\u0F35 &2\u024C\"\"6\u024C7\u024D.\u0F29 &2\u024E\"\"6\u024E7\u024F.\u0F1D &2\u0250\"\"6\u02507\u0251.\u0F11 &2\u0252\"\"6\u02527\u0253.\u0F05 &2\u0254\"\"6\u02547\u0255.\u0EF9 &2\u0256\"\"6\u02567\u0257.\u0EED &2\u0258\"\"6\u02587\u0259.\u0EE1 &2\u025A\"\"6\u025A7\u025B.\u0ED5 &2\u025C\"\"6\u025C7\u025D.\u0EC9 &2\u025E\"\"6\u025E7\u025F.\u0EBD &2,\"\"6,7-.\u0EB1 &2\u0260\"\"6\u02607\u0261.\u0EA5 &2\u0262\"\"6\u02627\u0263.\u0E99 &2.\"\"6.7/.\u0E8D &2\u0264\"\"6\u02647\u0265.\u0E81 &2\u0266\"\"6\u02667\u0267.\u0E75 &2\u0268\"\"6\u02687\u0269.\u0E69 &2\u026A\"\"6\u026A7\u026B.\u0E5D &2\u026C\"\"6\u026C7\u026D.\u0E51 &2\u026E\"\"6\u026E7\u026F.\u0E45 &2\u0270\"\"6\u02707\u0271.\u0E39 &2\u0272\"\"6\u02727\u0273.\u0E2D &2\u0274\"\"6\u02747\u0275.\u0E21 &2\u0276\"\"6\u02767\u0277.\u0E15 &2\u0278\"\"6\u02787\u0279.\u0E09 &2\u027A\"\"6\u027A7\u027B.\u0DFD &2\u027C\"\"6\u027C7\u027D.\u0DF1 &2\u027E\"\"6\u027E7\u027F.\u0DE5 &2\u0280\"\"6\u02807\u0281.\u0DD9 &2\u0282\"\"6\u02827\u0283.\u0DCD &2\u0284\"\"6\u02847\u0285.\u0DC1 &2\u0286\"\"6\u02867\u0287.\u0DB5 &2\u0288\"\"6\u02887\u0289.\u0DA9 &2\u028A\"\"6\u028A7\u028B.\u0D9D &2\u028C\"\"6\u028C7\u028D.\u0D91 &2\u028E\"\"6\u028E7\u028F.\u0D85 &2\u0290\"\"6\u02907\u0291.\u0D79 &2\u0292\"\"6\u02927\u0293.\u0D6D &2\u0294\"\"6\u02947\u0295.\u0D61 &2\u0296\"\"6\u02967\u0297.\u0D55 &2\u0298\"\"6\u02987\u0299.\u0D49 &2\u029A\"\"6\u029A7\u029B.\u0D3D &2\u029C\"\"6\u029C7\u029D.\u0D31 &2\u029E\"\"6\u029E7\u029F.\u0D25 &2\u02A0\"\"6\u02A07\u02A1.\u0D19 &2\u02A2\"\"6\u02A27\u02A3.\u0D0D &2\u02A4\"\"6\u02A47\u02A5.\u0D01 &2\u02A6\"\"6\u02A67\u02A7.\u0CF5 &2\u02A8\"\"6\u02A87\u02A9.\u0CE9 &2\u02AA\"\"6\u02AA7\u02AB.\u0CDD &2\u02AC\"\"6\u02AC7\u02AD.\u0CD1 &2\u02AE\"\"6\u02AE7\u02AF.\u0CC5 &2\u02B0\"\"6\u02B07\u02B1.\u0CB9 &2\u02B2\"\"6\u02B27\u02B3.\u0CAD &2\u02B4\"\"6\u02B47\u02B5.\u0CA1 &2\u02B6\"\"6\u02B67\u02B7.\u0C95 &2\u02B8\"\"6\u02B87\u02B9.\u0C89 &2\u02BA\"\"6\u02BA7\u02BB.\u0C7D &2\u02BC\"\"6\u02BC7\u02BD.\u0C71 &2\u02BE\"\"6\u02BE7\u02BF.\u0C65 &2\u02C0\"\"6\u02C07\u02C1.\u0C59 &2\u02C2\"\"6\u02C27\u02C3.\u0C4D &2\u02C4\"\"6\u02C47\u02C5.\u0C41 &2\u02C6\"\"6\u02C67\u02C7.\u0C35 &2\u02C8\"\"6\u02C87\u02C9.\u0C29 &2\u02CA\"\"6\u02CA7\u02CB.\u0C1D &2\u02CC\"\"6\u02CC7\u02CD.\u0C11 &2\u02CE\"\"6\u02CE7\u02CF.\u0C05 &2\u02D0\"\"6\u02D07\u02D1.\u0BF9 &2\u02D2\"\"6\u02D27\u02D3.\u0BED &2\u02D4\"\"6\u02D47\u02D5.\u0BE1 &2\u02D6\"\"6\u02D67\u02D7.\u0BD5 &2\u02D8\"\"6\u02D87\u02D9.\u0BC9 &2\u02DA\"\"6\u02DA7\u02DB.\u0BBD &2\u02DC\"\"6\u02DC7\u02DD.\u0BB1 &2\u02DE\"\"6\u02DE7\u02DF.\u0BA5 &2\u02E0\"\"6\u02E07\u02E1.\u0B99 &2\u02E2\"\"6\u02E27\u02E3.\u0B8D &2\u02E4\"\"6\u02E47\u02E5.\u0B81 &2\u02E6\"\"6\u02E67\u02E7.\u0B75 &2\u02E8\"\"6\u02E87\u02E9.\u0B69 &2\u02EA\"\"6\u02EA7\u02EB.\u0B5D &2\u02EC\"\"6\u02EC7\u02ED.\u0B51 &2\u02EE\"\"6\u02EE7\u02EF.\u0B45 &2\u02F0\"\"6\u02F07\u02F1.\u0B39 &2\u02F2\"\"6\u02F27\u02F3.\u0B2D &2\u02F4\"\"6\u02F47\u02F5.\u0B21 &2\u02F6\"\"6\u02F67\u02F7.\u0B15 &2\u02F8\"\"6\u02F87\u02F9.\u0B09 &2\u02FA\"\"6\u02FA7\u02FB.\u0AFD &2\u02FC\"\"6\u02FC7\u02FD.\u0AF1 &2\u02FE\"\"6\u02FE7\u02FF.\u0AE5 &2\u0300\"\"6\u03007\u0301.\u0AD9 &2\u0302\"\"6\u03027\u0303.\u0ACD &2\u0304\"\"6\u03047\u0305.\u0AC1 &2\u0306\"\"6\u03067\u0307.\u0AB5 &2\u0308\"\"6\u03087\u0309.\u0AA9 &2\u030A\"\"6\u030A7\u030B.\u0A9D &2\u030C\"\"6\u030C7\u030D.\u0A91 &2\u030E\"\"6\u030E7\u030F.\u0A85 &2\u0310\"\"6\u03107\u0311.\u0A79 &2\u0312\"\"6\u03127\u0313.\u0A6D &2\u0314\"\"6\u03147\u0315.\u0A61 &26\"\"6677.\u0A55 &2\u0316\"\"6\u03167\u0317.\u0A49 &2\u0318\"\"6\u03187\u0319.\u0A3D &2\u031A\"\"6\u031A7\u031B.\u0A31 &2\u031C\"\"6\u031C7\u031D.\u0A25 &2\u031E\"\"6\u031E7\u031F.\u0A19 &2\u0320\"\"6\u03207\u0321.\u0A0D &2\u0322\"\"6\u03227\u0323.\u0A01 &28\"\"6879.\u09F5 &2\u0324\"\"6\u03247\u0325.\u09E9 &2\u0326\"\"6\u03267\u0327.\u09DD &2\u0328\"\"6\u03287\u0329.\u09D1 &2\u032A\"\"6\u032A7\u032B.\u09C5 &2\u032C\"\"6\u032C7\u032D.\u09B9 &2\u032E\"\"6\u032E7\u032F.\u09AD &2\u0330\"\"6\u03307\u0331.\u09A1 &2\u0332\"\"6\u03327\u0333.\u0995 &2\u0334\"\"6\u03347\u0335.\u0989 &2\u0336\"\"6\u03367\u0337.\u097D &2\u0338\"\"6\u03387\u0339.\u0971 &2\u033A\"\"6\u033A7\u033B.\u0965 &2\u033C\"\"6\u033C7\u033D.\u0959 &2\u033E\"\"6\u033E7\u033F.\u094D &2\u0340\"\"6\u03407\u0341.\u0941 &2\u0342\"\"6\u03427\u0343.\u0935 &2\u0344\"\"6\u03447\u0345.\u0929 &2\u0346\"\"6\u03467\u0347.\u091D &2\u0348\"\"6\u03487\u0349.\u0911 &2\u034A\"\"6\u034A7\u034B.\u0905 &2\u034C\"\"6\u034C7\u034D.\u08F9 &2\u034E\"\"6\u034E7\u034F.\u08ED &2\u0350\"\"6\u03507\u0351.\u08E1 &2\u0352\"\"6\u03527\u0353.\u08D5 &2:\"\"6:7;.\u08C9 &2\u0354\"\"6\u03547\u0355.\u08BD &2\u0356\"\"6\u03567\u0357.\u08B1 &2\u0358\"\"6\u03587\u0359.\u08A5 &2\u035A\"\"6\u035A7\u035B.\u0899 &2\u035C\"\"6\u035C7\u035D.\u088D &2\u035E\"\"6\u035E7\u035F.\u0881 &2\u0360\"\"6\u03607\u0361.\u0875 &2\u0362\"\"6\u03627\u0363.\u0869 &2\u0364\"\"6\u03647\u0365.\u085D &2\u0366\"\"6\u03667\u0367.\u0851 &2\u0368\"\"6\u03687\u0369.\u0845 &2\u036A\"\"6\u036A7\u036B.\u0839 &2\u036C\"\"6\u036C7\u036D.\u082D &2\u036E\"\"6\u036E7\u036F.\u0821 &2\u0370\"\"6\u03707\u0371.\u0815 &2\u0372\"\"6\u03727\u0373.\u0809 &2\u0374\"\"6\u03747\u0375.\u07FD &2\u0376\"\"6\u03767\u0377.\u07F1 &2\u0378\"\"6\u03787\u0379.\u07E5 &2\u037A\"\"6\u037A7\u037B.\u07D9 &2\u037C\"\"6\u037C7\u037D.\u07CD &2\u037E\"\"6\u037E7\u037F.\u07C1 &2\u0380\"\"6\u03807\u0381.\u07B5 &2\u0382\"\"6\u03827\u0383.\u07A9 &2\u0384\"\"6\u03847\u0385.\u079D &2\u0386\"\"6\u03867\u0387.\u0791 &2\u0388\"\"6\u03887\u0389.\u0785 &2\u038A\"\"6\u038A7\u038B.\u0779 &2\u038C\"\"6\u038C7\u038D.\u076D &2\u038E\"\"6\u038E7\u038F.\u0761 &2\u0390\"\"6\u03907\u0391.\u0755 &2\u0392\"\"6\u03927\u0393.\u0749 &2\u0394\"\"6\u03947\u0395.\u073D &2\u0396\"\"6\u03967\u0397.\u0731 &2\u0398\"\"6\u03987\u0399.\u0725 &2\u039A\"\"6\u039A7\u039B.\u0719 &2\u039C\"\"6\u039C7\u039D.\u070D &2\u039E\"\"6\u039E7\u039F.\u0701 &2\u03A0\"\"6\u03A07\u03A1.\u06F5 &2\u03A2\"\"6\u03A27\u03A3.\u06E9 &2\u03A4\"\"6\u03A47\u03A5.\u06DD &2\u03A6\"\"6\u03A67\u03A7.\u06D1 &2\u03A8\"\"6\u03A87\u03A9.\u06C5 &2\u03AA\"\"6\u03AA7\u03AB.\u06B9 &2\u03AC\"\"6\u03AC7\u03AD.\u06AD &2\u03AE\"\"6\u03AE7\u03AF.\u06A1 &2\u03B0\"\"6\u03B07\u03B1.\u0695 &2\u03B2\"\"6\u03B27\u03B3.\u0689 &2\u03B4\"\"6\u03B47\u03B5.\u067D &2\u03B6\"\"6\u03B67\u03B7.\u0671 &2\u03B8\"\"6\u03B87\u03B9.\u0665 &2\u03BA\"\"6\u03BA7\u03BB.\u0659 &2\u03BC\"\"6\u03BC7\u03BD.\u064D &2\u03BE\"\"6\u03BE7\u03BF.\u0641 &2\u03C0\"\"6\u03C07\u03C1.\u0635 &2\u03C2\"\"6\u03C27\u03C3.\u0629 &2\u03C4\"\"6\u03C47\u03C5.\u061D &2\u03C6\"\"6\u03C67\u03C7.\u0611 &2\u03C8\"\"6\u03C87\u03C9.\u0605 &2\u03CA\"\"6\u03CA7\u03CB.\u05F9 &2\u03CC\"\"6\u03CC7\u03CD.\u05ED &2\u03CE\"\"6\u03CE7\u03CF.\u05E1 &2\u03D0\"\"6\u03D07\u03D1.\u05D5 &2\u03D2\"\"6\u03D27\u03D3.\u05C9 &2\u03D4\"\"6\u03D47\u03D5.\u05BD &2\u03D6\"\"6\u03D67\u03D7.\u05B1 &2\u03D8\"\"6\u03D87\u03D9.\u05A5 &2\u03DA\"\"6\u03DA7\u03DB.\u0599 &2\u03DC\"\"6\u03DC7\u03DD.\u058D &2\u03DE\"\"6\u03DE7\u03DF.\u0581 &2\u03E0\"\"6\u03E07\u03E1.\u0575 &2\u03E2\"\"6\u03E27\u03E3.\u0569 &2\u03E4\"\"6\u03E47\u03E5.\u055D &2\u03E6\"\"6\u03E67\u03E7.\u0551 &2\u03E8\"\"6\u03E87\u03E9.\u0545 &2\u03EA\"\"6\u03EA7\u03EB.\u0539 &2\u03EC\"\"6\u03EC7\u03ED.\u052D &2\u03EE\"\"6\u03EE7\u03EF.\u0521 &2<\"\"6<7=.\u0515 &2\u03F0\"\"6\u03F07\u03F1.\u0509 &2\u03F2\"\"6\u03F27\u03F3.\u04FD &2\u03F4\"\"6\u03F47\u03F5.\u04F1 &2\u03F6\"\"6\u03F67\u03F7.\u04E5 &2\u03F8\"\"6\u03F87\u03F9.\u04D9 &2\u03FA\"\"6\u03FA7\u03FB.\u04CD &2\u03FC\"\"6\u03FC7\u03FD.\u04C1 &2\u03FE\"\"6\u03FE7\u03FF.\u04B5 &2\u0400\"\"6\u04007\u0401.\u04A9 &2\u0402\"\"6\u04027\u0403.\u049D &2\u0404\"\"6\u04047\u0405.\u0491 &2\u0406\"\"6\u04067\u0407.\u0485 &2\u0408\"\"6\u04087\u0409.\u0479 &2\u040A\"\"6\u040A7\u040B.\u046D &2\u040C\"\"6\u040C7\u040D.\u0461 &2\u040E\"\"6\u040E7\u040F.\u0455 &2\u0410\"\"6\u04107\u0411.\u0449 &2\u0412\"\"6\u04127\u0413.\u043D &2\u0414\"\"6\u04147\u0415.\u0431 &2\u0416\"\"6\u04167\u0417.\u0425 &2\u0418\"\"6\u04187\u0419.\u0419 &2\u041A\"\"6\u041A7\u041B.\u040D &2\u041C\"\"6\u041C7\u041D.\u0401 &2\u041E\"\"6\u041E7\u041F.\u03F5 &2\u0420\"\"6\u04207\u0421.\u03E9 &2\u0422\"\"6\u04227\u0423.\u03DD &2\u0424\"\"6\u04247\u0425.\u03D1 &2\u0426\"\"6\u04267\u0427.\u03C5 &2\u0428\"\"6\u04287\u0429.\u03B9 &2\u042A\"\"6\u042A7\u042B.\u03AD &2\u042C\"\"6\u042C7\u042D.\u03A1 &2\u042E\"\"6\u042E7\u042F.\u0395 &2\u0430\"\"6\u04307\u0431.\u0389 &2\u0432\"\"6\u04327\u0433.\u037D &2\u0434\"\"6\u04347\u0435.\u0371 &2\u0436\"\"6\u04367\u0437.\u0365 &2\u0438\"\"6\u04387\u0439.\u0359 &2\u043A\"\"6\u043A7\u043B.\u034D &2\u043C\"\"6\u043C7\u043D.\u0341 &2\u043E\"\"6\u043E7\u043F.\u0335 &2\u0440\"\"6\u04407\u0441.\u0329 &2\u0442\"\"6\u04427\u0443.\u031D &2\u0444\"\"6\u04447\u0445.\u0311 &2\u0446\"\"6\u04467\u0447.\u0305 &2\u0448\"\"6\u04487\u0449.\u02F9 &2\u044A\"\"6\u044A7\u044B.\u02ED &2\u044C\"\"6\u044C7\u044D.\u02E1 &2\u044E\"\"6\u044E7\u044F.\u02D5 &2\u0450\"\"6\u04507\u0451.\u02C9 &2\u0452\"\"6\u04527\u0453.\u02BD &2\u0454\"\"6\u04547\u0455.\u02B1 &2\u0456\"\"6\u04567\u0457.\u02A5 &2\u0458\"\"6\u04587\u0459.\u0299 &2\u045A\"\"6\u045A7\u045B.\u028D &2\u045C\"\"6\u045C7\u045D.\u0281 &2\u045E\"\"6\u045E7\u045F.\u0275 &2\u0460\"\"6\u04607\u0461.\u0269 &2\u0462\"\"6\u04627\u0463.\u025D &2\u0464\"\"6\u04647\u0465.\u0251 &2\u0466\"\"6\u04667\u0467.\u0245 &2\u0468\"\"6\u04687\u0469.\u0239 &2\u046A\"\"6\u046A7\u046B.\u022D &2\u046C\"\"6\u046C7\u046D.\u0221 &2\u046E\"\"6\u046E7\u046F.\u0215 &2\u0470\"\"6\u04707\u0471.\u0209 &2\u0472\"\"6\u04727\u0473.\u01FD &2\u0474\"\"6\u04747\u0475.\u01F1 &2\u0476\"\"6\u04767\u0477.\u01E5 &2\u0478\"\"6\u04787\u0479.\u01D9 &2\u047A\"\"6\u047A7\u047B.\u01CD &2\u047C\"\"6\u047C7\u047D.\u01C1 &2\u047E\"\"6\u047E7\u047F.\u01B5 &2\u0480\"\"6\u04807\u0481.\u01A9 &2\u0482\"\"6\u04827\u0483.\u019D &2\u0484\"\"6\u04847\u0485.\u0191 &2\u0486\"\"6\u04867\u0487.\u0185 &2\u0488\"\"6\u04887\u0489.\u0179 &2\u048A\"\"6\u048A7\u048B.\u016D &2\u048C\"\"6\u048C7\u048D.\u0161 &2\u048E\"\"6\u048E7\u048F.\u0155 &2\u0490\"\"6\u04907\u0491.\u0149 &2\u0492\"\"6\u04927\u0493.\u013D &2\u0494\"\"6\u04947\u0495.\u0131 &2\u0496\"\"6\u04967\u0497.\u0125 &2\u0498\"\"6\u04987\u0499.\u0119 &2\u049A\"\"6\u049A7\u049B.\u010D &2\u049C\"\"6\u049C7\u049D.\u0101 &2\u049E\"\"6\u049E7\u049F.\xF5 &2\u04A0\"\"6\u04A07\u04A1.\xE9 &2\u04A2\"\"6\u04A27\u04A3.\xDD &2\u04A4\"\"6\u04A47\u04A5.\xD1 &2\u04A6\"\"6\u04A67\u04A7.\xC5 &2\u04A8\"\"6\u04A87\u04A9.\xB9 &2\u04AA\"\"6\u04AA7\u04AB.\xAD &2\u04AC\"\"6\u04AC7\u04AD.\xA1 &2\u04AE\"\"6\u04AE7\u04AF.\x95 &2\u04B0\"\"6\u04B07\u04B1.\x89 &2\u04B2\"\"6\u04B27\u04B3.} &2\u04B4\"\"6\u04B47\u04B5.q &2\u04B6\"\"6\u04B67\u04B7.e &2\u04B8\"\"6\u04B87\u04B9.Y &2\u04BA\"\"6\u04BA7\u04BB.M &2\u04BC\"\"6\u04BC7\u04BD.A &2\u04BE\"\"6\u04BE7\u04BF.5 &2\u04C0\"\"6\u04C07\u04C1.) &2\u04C2\"\"6\u04C27\u04C3/' 8!:\u04C4!! )"),
          peg$decode("%$1\"\"5!7\u04C50(*1\"\"5!7\u04C5&.6 &$4\u04C6\"\"5!7\u04C70)*4\u04C6\"\"5!7\u04C7&/& 8!:\u04C8! )")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
